services:
  db:
    image: postgres:17-alpine
    container_name: ocserv_postgres
    environment:
      POSTGRES_USER: ${DB_USERNAME:-ocserv}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-ocserv-passwd}
      POSTGRES_DB: ocserv
    volumes:
      - ./volumes/pg_data:/var/lib/postgresql/data
    networks:
      - shared-app
    restart: unless-stopped

  ocserv:
    build:
      context: .
      dockerfile: Dockerfile-Ocserv
    image: ocserv_users_management:ocserv_with_api
    container_name: ocserv
    privileged: true
    env_file:
      - ./.env
    environment:
      ALLOW_ORIGINS: "http://${HOST}:3000,https://${HOST}:3000"
      DB_HOST: db
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    volumes:
      - ./volumes/ocserv:/etc/ocserv
    ports:
      - ${OCSERV_PORT:-443}:443/tcp
      - ${OCSERV_PORT:-443}:443/udp
    networks:
      - shared-app
    restart: unless-stopped

  stream_log:
    image: ocserv_users_management:stream_log
    build:
      context: .
      dockerfile: Dockerfile-Stream-Log
    container_name: stream_log
    volumes:
      - ./volumes/db:/usr/local/bin/db
      - ./volumes/db_tmp:/root/ocserv_db
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ./.env
    environment:
      DB_HOST: db
    networks:
      - shared-app
    depends_on:
      - ocserv
    restart: unless-stopped

  web:
    image: ocserv_users_management:web
    build:
      context: .
      dockerfile: Dockerfile-Web
      args:
        - LANGUAGES=${LANGUAGES}
    container_name: web
    volumes:
      - ./volumes/nginx/certs:/etc/nginx/certs
    env_file:
      - ./.env
    ports:
      - "3000:3000"
    networks:
      - shared-app
    depends_on:
      - ocserv
      - stream_log
    restart: unless-stopped


networks:
  shared-app: