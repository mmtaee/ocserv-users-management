/* tslint:disable */
/* eslint-disable */
/**
 * Ocserv User management Example Api
 * This is a sample Ocserv User management Api server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { LogUsersLogsResponse } from '../models';
// @ts-ignore
import type { MiddlewaresUnauthorized } from '../models';
// @ts-ignore
import type { RequestErrorResponse } from '../models';
/**
 * LogsUsersApi - axios parameter creator
 * @export
 */
export const LogsUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List of Users logs on self user model
         * @summary List of Users logs on self user model
         * @param {string} authorization Bearer TOKEN
         * @param {number} [page] Page number, starting from 1
         * @param {number} [size] Number of items per page
         * @param {string} [order] Field to order by
         * @param {LogsUsersGetSortEnum} [sort] Sort order, either ASC or DESC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsUsersGet: async (authorization: string, page?: number, size?: number, order?: string, sort?: LogsUsersGetSortEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('logsUsersGet', 'authorization', authorization)
            const localVarPath = `/logs/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogsUsersApi - functional programming interface
 * @export
 */
export const LogsUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogsUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * List of Users logs on self user model
         * @summary List of Users logs on self user model
         * @param {string} authorization Bearer TOKEN
         * @param {number} [page] Page number, starting from 1
         * @param {number} [size] Number of items per page
         * @param {string} [order] Field to order by
         * @param {LogsUsersGetSortEnum} [sort] Sort order, either ASC or DESC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsUsersGet(authorization: string, page?: number, size?: number, order?: string, sort?: LogsUsersGetSortEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogUsersLogsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsUsersGet(authorization, page, size, order, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogsUsersApi.logsUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LogsUsersApi - factory interface
 * @export
 */
export const LogsUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogsUsersApiFp(configuration)
    return {
        /**
         * List of Users logs on self user model
         * @summary List of Users logs on self user model
         * @param {LogsUsersApiLogsUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsUsersGet(requestParameters: LogsUsersApiLogsUsersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LogUsersLogsResponse> {
            return localVarFp.logsUsersGet(requestParameters.authorization, requestParameters.page, requestParameters.size, requestParameters.order, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for logsUsersGet operation in LogsUsersApi.
 * @export
 * @interface LogsUsersApiLogsUsersGetRequest
 */
export interface LogsUsersApiLogsUsersGetRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof LogsUsersApiLogsUsersGet
     */
    readonly authorization: string

    /**
     * Page number, starting from 1
     * @type {number}
     * @memberof LogsUsersApiLogsUsersGet
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof LogsUsersApiLogsUsersGet
     */
    readonly size?: number

    /**
     * Field to order by
     * @type {string}
     * @memberof LogsUsersApiLogsUsersGet
     */
    readonly order?: string

    /**
     * Sort order, either ASC or DESC
     * @type {'ASC' | 'DESC'}
     * @memberof LogsUsersApiLogsUsersGet
     */
    readonly sort?: LogsUsersGetSortEnum
}

/**
 * LogsUsersApi - object-oriented interface
 * @export
 * @class LogsUsersApi
 * @extends {BaseAPI}
 */
export class LogsUsersApi extends BaseAPI {
    /**
     * List of Users logs on self user model
     * @summary List of Users logs on self user model
     * @param {LogsUsersApiLogsUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogsUsersApi
     */
    public logsUsersGet(requestParameters: LogsUsersApiLogsUsersGetRequest, options?: RawAxiosRequestConfig) {
        return LogsUsersApiFp(this.configuration).logsUsersGet(requestParameters.authorization, requestParameters.page, requestParameters.size, requestParameters.order, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const LogsUsersGetSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
} as const;
export type LogsUsersGetSortEnum = typeof LogsUsersGetSortEnum[keyof typeof LogsUsersGetSortEnum];
