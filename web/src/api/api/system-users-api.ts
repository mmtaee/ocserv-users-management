/* tslint:disable */
/* eslint-disable */
/**
 * Ocserv User management Example Api
 * This is a sample Ocserv User management Api server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { MiddlewaresPermissionDenied } from '../models';
// @ts-ignore
import type { MiddlewaresUnauthorized } from '../models';
// @ts-ignore
import type { ModelsUser } from '../models';
// @ts-ignore
import type { ModelsUsersLookup } from '../models';
// @ts-ignore
import type { RequestErrorResponse } from '../models';
// @ts-ignore
import type { SystemChangeUserPassword } from '../models';
// @ts-ignore
import type { SystemChangeUserPasswordBySelf } from '../models';
// @ts-ignore
import type { SystemCreateUserData } from '../models';
// @ts-ignore
import type { SystemLoginData } from '../models';
// @ts-ignore
import type { SystemUserLoginResponse } from '../models';
// @ts-ignore
import type { SystemUsersResponse } from '../models';
/**
 * SystemUsersApi - axios parameter creator
 * @export
 */
export const SystemUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List of Admin or simple users
         * @summary List of Admin or simple users
         * @param {string} authorization Bearer TOKEN
         * @param {number} [page] Page number, starting from 1
         * @param {number} [size] Number of items per page
         * @param {string} [order] Field to order by
         * @param {SystemUsersGetSortEnum} [sort] Sort order, either ASC or DESC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersGet: async (authorization: string, page?: number, size?: number, order?: string, sort?: SystemUsersGetSortEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('systemUsersGet', 'authorization', authorization)
            const localVarPath = `/system/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Admin users login with Google captcha(captcha site key required in get config api)
         * @summary Admin users login
         * @param {SystemLoginData} request login data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersLoginPost: async (request: SystemLoginData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('systemUsersLoginPost', 'request', request)
            const localVarPath = `/system/users/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of Users Lookup
         * @summary List of Users Lookup
         * @param {string} authorization Bearer TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersLookupGet: async (authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('systemUsersLookupGet', 'authorization', authorization)
            const localVarPath = `/system/users/lookup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change user password by self
         * @summary Change user password by self
         * @param {string} authorization Bearer TOKEN
         * @param {SystemChangeUserPasswordBySelf} request user new password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersPasswordPost: async (authorization: string, request: SystemChangeUserPasswordBySelf, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('systemUsersPasswordPost', 'authorization', authorization)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('systemUsersPasswordPost', 'request', request)
            const localVarPath = `/system/users/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create user Admin or simple
         * @summary Create user
         * @param {string} authorization Bearer TOKEN
         * @param {SystemCreateUserData} request create user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersPost: async (authorization: string, request: SystemCreateUserData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('systemUsersPost', 'authorization', authorization)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('systemUsersPost', 'request', request)
            const localVarPath = `/system/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get User Profile
         * @summary Get User Profile
         * @param {string} authorization Bearer TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersProfileGet: async (authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('systemUsersProfileGet', 'authorization', authorization)
            const localVarPath = `/system/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete simple user
         * @summary Delete simple user
         * @param {string} uid User UID
         * @param {string} authorization Bearer TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUidDelete: async (uid: string, authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('systemUsersUidDelete', 'uid', uid)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('systemUsersUidDelete', 'authorization', authorization)
            const localVarPath = `/system/users/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change user password by admin
         * @summary Change user password by admin
         * @param {string} uid User UID
         * @param {string} authorization Bearer TOKEN
         * @param {SystemChangeUserPassword} request user new password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUidPasswordPost: async (uid: string, authorization: string, request: SystemChangeUserPassword, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('systemUsersUidPasswordPost', 'uid', uid)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('systemUsersUidPasswordPost', 'authorization', authorization)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('systemUsersUidPasswordPost', 'request', request)
            const localVarPath = `/system/users/{uid}/password`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemUsersApi - functional programming interface
 * @export
 */
export const SystemUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * List of Admin or simple users
         * @summary List of Admin or simple users
         * @param {string} authorization Bearer TOKEN
         * @param {number} [page] Page number, starting from 1
         * @param {number} [size] Number of items per page
         * @param {string} [order] Field to order by
         * @param {SystemUsersGetSortEnum} [sort] Sort order, either ASC or DESC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemUsersGet(authorization: string, page?: number, size?: number, order?: string, sort?: SystemUsersGetSortEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemUsersGet(authorization, page, size, order, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemUsersApi.systemUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Admin users login with Google captcha(captcha site key required in get config api)
         * @summary Admin users login
         * @param {SystemLoginData} request login data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemUsersLoginPost(request: SystemLoginData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemUserLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemUsersLoginPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemUsersApi.systemUsersLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of Users Lookup
         * @summary List of Users Lookup
         * @param {string} authorization Bearer TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemUsersLookupGet(authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsUsersLookup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemUsersLookupGet(authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemUsersApi.systemUsersLookupGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Change user password by self
         * @summary Change user password by self
         * @param {string} authorization Bearer TOKEN
         * @param {SystemChangeUserPasswordBySelf} request user new password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemUsersPasswordPost(authorization: string, request: SystemChangeUserPasswordBySelf, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemUsersPasswordPost(authorization, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemUsersApi.systemUsersPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create user Admin or simple
         * @summary Create user
         * @param {string} authorization Bearer TOKEN
         * @param {SystemCreateUserData} request create user data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemUsersPost(authorization: string, request: SystemCreateUserData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemUsersPost(authorization, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemUsersApi.systemUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get User Profile
         * @summary Get User Profile
         * @param {string} authorization Bearer TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemUsersProfileGet(authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemUsersProfileGet(authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemUsersApi.systemUsersProfileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete simple user
         * @summary Delete simple user
         * @param {string} uid User UID
         * @param {string} authorization Bearer TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemUsersUidDelete(uid: string, authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemUsersUidDelete(uid, authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemUsersApi.systemUsersUidDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Change user password by admin
         * @summary Change user password by admin
         * @param {string} uid User UID
         * @param {string} authorization Bearer TOKEN
         * @param {SystemChangeUserPassword} request user new password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemUsersUidPasswordPost(uid: string, authorization: string, request: SystemChangeUserPassword, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemUsersUidPasswordPost(uid, authorization, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemUsersApi.systemUsersUidPasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemUsersApi - factory interface
 * @export
 */
export const SystemUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemUsersApiFp(configuration)
    return {
        /**
         * List of Admin or simple users
         * @summary List of Admin or simple users
         * @param {SystemUsersApiSystemUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersGet(requestParameters: SystemUsersApiSystemUsersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SystemUsersResponse> {
            return localVarFp.systemUsersGet(requestParameters.authorization, requestParameters.page, requestParameters.size, requestParameters.order, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Admin users login with Google captcha(captcha site key required in get config api)
         * @summary Admin users login
         * @param {SystemUsersApiSystemUsersLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersLoginPost(requestParameters: SystemUsersApiSystemUsersLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SystemUserLoginResponse> {
            return localVarFp.systemUsersLoginPost(requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * List of Users Lookup
         * @summary List of Users Lookup
         * @param {SystemUsersApiSystemUsersLookupGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersLookupGet(requestParameters: SystemUsersApiSystemUsersLookupGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ModelsUsersLookup>> {
            return localVarFp.systemUsersLookupGet(requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Change user password by self
         * @summary Change user password by self
         * @param {SystemUsersApiSystemUsersPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersPasswordPost(requestParameters: SystemUsersApiSystemUsersPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SystemUsersResponse> {
            return localVarFp.systemUsersPasswordPost(requestParameters.authorization, requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * Create user Admin or simple
         * @summary Create user
         * @param {SystemUsersApiSystemUsersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersPost(requestParameters: SystemUsersApiSystemUsersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsUser> {
            return localVarFp.systemUsersPost(requestParameters.authorization, requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * Get User Profile
         * @summary Get User Profile
         * @param {SystemUsersApiSystemUsersProfileGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersProfileGet(requestParameters: SystemUsersApiSystemUsersProfileGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsUser> {
            return localVarFp.systemUsersProfileGet(requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete simple user
         * @summary Delete simple user
         * @param {SystemUsersApiSystemUsersUidDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUidDelete(requestParameters: SystemUsersApiSystemUsersUidDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.systemUsersUidDelete(requestParameters.uid, requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Change user password by admin
         * @summary Change user password by admin
         * @param {SystemUsersApiSystemUsersUidPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUidPasswordPost(requestParameters: SystemUsersApiSystemUsersUidPasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SystemUsersResponse> {
            return localVarFp.systemUsersUidPasswordPost(requestParameters.uid, requestParameters.authorization, requestParameters.request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for systemUsersGet operation in SystemUsersApi.
 * @export
 * @interface SystemUsersApiSystemUsersGetRequest
 */
export interface SystemUsersApiSystemUsersGetRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof SystemUsersApiSystemUsersGet
     */
    readonly authorization: string

    /**
     * Page number, starting from 1
     * @type {number}
     * @memberof SystemUsersApiSystemUsersGet
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof SystemUsersApiSystemUsersGet
     */
    readonly size?: number

    /**
     * Field to order by
     * @type {string}
     * @memberof SystemUsersApiSystemUsersGet
     */
    readonly order?: string

    /**
     * Sort order, either ASC or DESC
     * @type {'ASC' | 'DESC'}
     * @memberof SystemUsersApiSystemUsersGet
     */
    readonly sort?: SystemUsersGetSortEnum
}

/**
 * Request parameters for systemUsersLoginPost operation in SystemUsersApi.
 * @export
 * @interface SystemUsersApiSystemUsersLoginPostRequest
 */
export interface SystemUsersApiSystemUsersLoginPostRequest {
    /**
     * login data
     * @type {SystemLoginData}
     * @memberof SystemUsersApiSystemUsersLoginPost
     */
    readonly request: SystemLoginData
}

/**
 * Request parameters for systemUsersLookupGet operation in SystemUsersApi.
 * @export
 * @interface SystemUsersApiSystemUsersLookupGetRequest
 */
export interface SystemUsersApiSystemUsersLookupGetRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof SystemUsersApiSystemUsersLookupGet
     */
    readonly authorization: string
}

/**
 * Request parameters for systemUsersPasswordPost operation in SystemUsersApi.
 * @export
 * @interface SystemUsersApiSystemUsersPasswordPostRequest
 */
export interface SystemUsersApiSystemUsersPasswordPostRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof SystemUsersApiSystemUsersPasswordPost
     */
    readonly authorization: string

    /**
     * user new password
     * @type {SystemChangeUserPasswordBySelf}
     * @memberof SystemUsersApiSystemUsersPasswordPost
     */
    readonly request: SystemChangeUserPasswordBySelf
}

/**
 * Request parameters for systemUsersPost operation in SystemUsersApi.
 * @export
 * @interface SystemUsersApiSystemUsersPostRequest
 */
export interface SystemUsersApiSystemUsersPostRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof SystemUsersApiSystemUsersPost
     */
    readonly authorization: string

    /**
     * create user data
     * @type {SystemCreateUserData}
     * @memberof SystemUsersApiSystemUsersPost
     */
    readonly request: SystemCreateUserData
}

/**
 * Request parameters for systemUsersProfileGet operation in SystemUsersApi.
 * @export
 * @interface SystemUsersApiSystemUsersProfileGetRequest
 */
export interface SystemUsersApiSystemUsersProfileGetRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof SystemUsersApiSystemUsersProfileGet
     */
    readonly authorization: string
}

/**
 * Request parameters for systemUsersUidDelete operation in SystemUsersApi.
 * @export
 * @interface SystemUsersApiSystemUsersUidDeleteRequest
 */
export interface SystemUsersApiSystemUsersUidDeleteRequest {
    /**
     * User UID
     * @type {string}
     * @memberof SystemUsersApiSystemUsersUidDelete
     */
    readonly uid: string

    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof SystemUsersApiSystemUsersUidDelete
     */
    readonly authorization: string
}

/**
 * Request parameters for systemUsersUidPasswordPost operation in SystemUsersApi.
 * @export
 * @interface SystemUsersApiSystemUsersUidPasswordPostRequest
 */
export interface SystemUsersApiSystemUsersUidPasswordPostRequest {
    /**
     * User UID
     * @type {string}
     * @memberof SystemUsersApiSystemUsersUidPasswordPost
     */
    readonly uid: string

    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof SystemUsersApiSystemUsersUidPasswordPost
     */
    readonly authorization: string

    /**
     * user new password
     * @type {SystemChangeUserPassword}
     * @memberof SystemUsersApiSystemUsersUidPasswordPost
     */
    readonly request: SystemChangeUserPassword
}

/**
 * SystemUsersApi - object-oriented interface
 * @export
 * @class SystemUsersApi
 * @extends {BaseAPI}
 */
export class SystemUsersApi extends BaseAPI {
    /**
     * List of Admin or simple users
     * @summary List of Admin or simple users
     * @param {SystemUsersApiSystemUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemUsersApi
     */
    public systemUsersGet(requestParameters: SystemUsersApiSystemUsersGetRequest, options?: RawAxiosRequestConfig) {
        return SystemUsersApiFp(this.configuration).systemUsersGet(requestParameters.authorization, requestParameters.page, requestParameters.size, requestParameters.order, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Admin users login with Google captcha(captcha site key required in get config api)
     * @summary Admin users login
     * @param {SystemUsersApiSystemUsersLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemUsersApi
     */
    public systemUsersLoginPost(requestParameters: SystemUsersApiSystemUsersLoginPostRequest, options?: RawAxiosRequestConfig) {
        return SystemUsersApiFp(this.configuration).systemUsersLoginPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of Users Lookup
     * @summary List of Users Lookup
     * @param {SystemUsersApiSystemUsersLookupGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemUsersApi
     */
    public systemUsersLookupGet(requestParameters: SystemUsersApiSystemUsersLookupGetRequest, options?: RawAxiosRequestConfig) {
        return SystemUsersApiFp(this.configuration).systemUsersLookupGet(requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change user password by self
     * @summary Change user password by self
     * @param {SystemUsersApiSystemUsersPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemUsersApi
     */
    public systemUsersPasswordPost(requestParameters: SystemUsersApiSystemUsersPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return SystemUsersApiFp(this.configuration).systemUsersPasswordPost(requestParameters.authorization, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create user Admin or simple
     * @summary Create user
     * @param {SystemUsersApiSystemUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemUsersApi
     */
    public systemUsersPost(requestParameters: SystemUsersApiSystemUsersPostRequest, options?: RawAxiosRequestConfig) {
        return SystemUsersApiFp(this.configuration).systemUsersPost(requestParameters.authorization, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get User Profile
     * @summary Get User Profile
     * @param {SystemUsersApiSystemUsersProfileGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemUsersApi
     */
    public systemUsersProfileGet(requestParameters: SystemUsersApiSystemUsersProfileGetRequest, options?: RawAxiosRequestConfig) {
        return SystemUsersApiFp(this.configuration).systemUsersProfileGet(requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete simple user
     * @summary Delete simple user
     * @param {SystemUsersApiSystemUsersUidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemUsersApi
     */
    public systemUsersUidDelete(requestParameters: SystemUsersApiSystemUsersUidDeleteRequest, options?: RawAxiosRequestConfig) {
        return SystemUsersApiFp(this.configuration).systemUsersUidDelete(requestParameters.uid, requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change user password by admin
     * @summary Change user password by admin
     * @param {SystemUsersApiSystemUsersUidPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemUsersApi
     */
    public systemUsersUidPasswordPost(requestParameters: SystemUsersApiSystemUsersUidPasswordPostRequest, options?: RawAxiosRequestConfig) {
        return SystemUsersApiFp(this.configuration).systemUsersUidPasswordPost(requestParameters.uid, requestParameters.authorization, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SystemUsersGetSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
} as const;
export type SystemUsersGetSortEnum = typeof SystemUsersGetSortEnum[keyof typeof SystemUsersGetSortEnum];
