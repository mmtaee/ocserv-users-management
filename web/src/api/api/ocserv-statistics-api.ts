/* tslint:disable */
/* eslint-disable */
/**
 * Ocserv User management Example Api
 * This is a sample Ocserv User management Api server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { MiddlewaresUnauthorized } from '../models';
// @ts-ignore
import type { ModelsDailyTraffic } from '../models';
// @ts-ignore
import type { RequestErrorResponse } from '../models';
/**
 * OcservStatisticsApi - axios parameter creator
 * @export
 */
export const OcservStatisticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Ocserv Users Statistics
         * @summary Ocserv Users Statistics
         * @param {string} authorization Bearer TOKEN
         * @param {string} dateStart date_start
         * @param {string} dateEnd date_end
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservUsersStatisticsGet: async (authorization: string, dateStart: string, dateEnd: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocservUsersStatisticsGet', 'authorization', authorization)
            // verify required parameter 'dateStart' is not null or undefined
            assertParamExists('ocservUsersStatisticsGet', 'dateStart', dateStart)
            // verify required parameter 'dateEnd' is not null or undefined
            assertParamExists('ocservUsersStatisticsGet', 'dateEnd', dateEnd)
            const localVarPath = `/ocserv/users/statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateStart !== undefined) {
                localVarQueryParameter['date_start'] = dateStart;
            }

            if (dateEnd !== undefined) {
                localVarQueryParameter['date_end'] = dateEnd;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OcservStatisticsApi - functional programming interface
 * @export
 */
export const OcservStatisticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OcservStatisticsApiAxiosParamCreator(configuration)
    return {
        /**
         * Ocserv Users Statistics
         * @summary Ocserv Users Statistics
         * @param {string} authorization Bearer TOKEN
         * @param {string} dateStart date_start
         * @param {string} dateEnd date_end
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocservUsersStatisticsGet(authorization: string, dateStart: string, dateEnd: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsDailyTraffic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocservUsersStatisticsGet(authorization, dateStart, dateEnd, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservStatisticsApi.ocservUsersStatisticsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OcservStatisticsApi - factory interface
 * @export
 */
export const OcservStatisticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OcservStatisticsApiFp(configuration)
    return {
        /**
         * Ocserv Users Statistics
         * @summary Ocserv Users Statistics
         * @param {OcservStatisticsApiOcservUsersStatisticsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservUsersStatisticsGet(requestParameters: OcservStatisticsApiOcservUsersStatisticsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ModelsDailyTraffic>> {
            return localVarFp.ocservUsersStatisticsGet(requestParameters.authorization, requestParameters.dateStart, requestParameters.dateEnd, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for ocservUsersStatisticsGet operation in OcservStatisticsApi.
 * @export
 * @interface OcservStatisticsApiOcservUsersStatisticsGetRequest
 */
export interface OcservStatisticsApiOcservUsersStatisticsGetRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservStatisticsApiOcservUsersStatisticsGet
     */
    readonly authorization: string

    /**
     * date_start
     * @type {string}
     * @memberof OcservStatisticsApiOcservUsersStatisticsGet
     */
    readonly dateStart: string

    /**
     * date_end
     * @type {string}
     * @memberof OcservStatisticsApiOcservUsersStatisticsGet
     */
    readonly dateEnd: string
}

/**
 * OcservStatisticsApi - object-oriented interface
 * @export
 * @class OcservStatisticsApi
 * @extends {BaseAPI}
 */
export class OcservStatisticsApi extends BaseAPI {
    /**
     * Ocserv Users Statistics
     * @summary Ocserv Users Statistics
     * @param {OcservStatisticsApiOcservUsersStatisticsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservStatisticsApi
     */
    public ocservUsersStatisticsGet(requestParameters: OcservStatisticsApiOcservUsersStatisticsGetRequest, options?: RawAxiosRequestConfig) {
        return OcservStatisticsApiFp(this.configuration).ocservUsersStatisticsGet(requestParameters.authorization, requestParameters.dateStart, requestParameters.dateEnd, options).then((request) => request(this.axios, this.basePath));
    }
}

