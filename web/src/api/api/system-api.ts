/* tslint:disable */
/* eslint-disable */
/**
 * Ocserv User management Example Api
 * This is a sample Ocserv User management Api server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { MiddlewaresUnauthorized } from '../models';
// @ts-ignore
import type { RequestErrorResponse } from '../models';
// @ts-ignore
import type { SystemGetSystemInitResponse } from '../models';
// @ts-ignore
import type { SystemGetSystemResponse } from '../models';
// @ts-ignore
import type { SystemPatchSystemUpdateData } from '../models';
// @ts-ignore
import type { SystemSetupSystem } from '../models';
// @ts-ignore
import type { SystemSetupSystemResponse } from '../models';
/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get panel System Config
         * @summary Get panel System Config
         * @param {string} authorization Bearer TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGet: async (authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('systemGet', 'authorization', authorization)
            const localVarPath = `/system`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get panel System init Config
         * @summary Get panel System init Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemInitGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/system/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update panel System Config
         * @summary Update panel System Config
         * @param {string} authorization Bearer TOKEN
         * @param {SystemPatchSystemUpdateData} request update system config data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPatch: async (authorization: string, request: SystemPatchSystemUpdateData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('systemPatch', 'authorization', authorization)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('systemPatch', 'request', request)
            const localVarPath = `/system`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Setup user and system config
         * @summary Setup user and system config
         * @param {SystemSetupSystem} request system setup data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSetupPost: async (request: SystemSetupSystem, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('systemSetupPost', 'request', request)
            const localVarPath = `/system/setup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration)
    return {
        /**
         * Get panel System Config
         * @summary Get panel System Config
         * @param {string} authorization Bearer TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemGet(authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemGetSystemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemGet(authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.systemGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get panel System init Config
         * @summary Get panel System init Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemInitGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemGetSystemInitResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemInitGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.systemInitGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update panel System Config
         * @summary Update panel System Config
         * @param {string} authorization Bearer TOKEN
         * @param {SystemPatchSystemUpdateData} request update system config data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemPatch(authorization: string, request: SystemPatchSystemUpdateData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemGetSystemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemPatch(authorization, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.systemPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Setup user and system config
         * @summary Setup user and system config
         * @param {SystemSetupSystem} request system setup data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemSetupPost(request: SystemSetupSystem, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemSetupSystemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemSetupPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.systemSetupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemApiFp(configuration)
    return {
        /**
         * Get panel System Config
         * @summary Get panel System Config
         * @param {SystemApiSystemGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGet(requestParameters: SystemApiSystemGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SystemGetSystemResponse> {
            return localVarFp.systemGet(requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Get panel System init Config
         * @summary Get panel System init Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemInitGet(options?: RawAxiosRequestConfig): AxiosPromise<SystemGetSystemInitResponse> {
            return localVarFp.systemInitGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Update panel System Config
         * @summary Update panel System Config
         * @param {SystemApiSystemPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPatch(requestParameters: SystemApiSystemPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<SystemGetSystemResponse> {
            return localVarFp.systemPatch(requestParameters.authorization, requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * Setup user and system config
         * @summary Setup user and system config
         * @param {SystemApiSystemSetupPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemSetupPost(requestParameters: SystemApiSystemSetupPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SystemSetupSystemResponse> {
            return localVarFp.systemSetupPost(requestParameters.request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for systemGet operation in SystemApi.
 * @export
 * @interface SystemApiSystemGetRequest
 */
export interface SystemApiSystemGetRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof SystemApiSystemGet
     */
    readonly authorization: string
}

/**
 * Request parameters for systemPatch operation in SystemApi.
 * @export
 * @interface SystemApiSystemPatchRequest
 */
export interface SystemApiSystemPatchRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof SystemApiSystemPatch
     */
    readonly authorization: string

    /**
     * update system config data
     * @type {SystemPatchSystemUpdateData}
     * @memberof SystemApiSystemPatch
     */
    readonly request: SystemPatchSystemUpdateData
}

/**
 * Request parameters for systemSetupPost operation in SystemApi.
 * @export
 * @interface SystemApiSystemSetupPostRequest
 */
export interface SystemApiSystemSetupPostRequest {
    /**
     * system setup data
     * @type {SystemSetupSystem}
     * @memberof SystemApiSystemSetupPost
     */
    readonly request: SystemSetupSystem
}

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * Get panel System Config
     * @summary Get panel System Config
     * @param {SystemApiSystemGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemGet(requestParameters: SystemApiSystemGetRequest, options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).systemGet(requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get panel System init Config
     * @summary Get panel System init Config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemInitGet(options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).systemInitGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update panel System Config
     * @summary Update panel System Config
     * @param {SystemApiSystemPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemPatch(requestParameters: SystemApiSystemPatchRequest, options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).systemPatch(requestParameters.authorization, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Setup user and system config
     * @summary Setup user and system config
     * @param {SystemApiSystemSetupPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemSetupPost(requestParameters: SystemApiSystemSetupPostRequest, options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).systemSetupPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }
}

