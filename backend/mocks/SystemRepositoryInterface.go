// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	models "ocserv-bakend/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// SystemRepositoryInterface is an autogenerated mock type for the SystemRepositoryInterface type
type SystemRepositoryInterface struct {
	mock.Mock
}

// System provides a mock function with given fields: ctx
func (_m *SystemRepositoryInterface) System(ctx context.Context) (*models.System, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for System")
	}

	var r0 *models.System
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.System, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.System); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.System)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SystemUpdate provides a mock function with given fields: ctx, system
func (_m *SystemRepositoryInterface) SystemUpdate(ctx context.Context, system *models.System) (*models.System, error) {
	ret := _m.Called(ctx, system)

	if len(ret) == 0 {
		panic("no return value specified for SystemUpdate")
	}

	var r0 *models.System
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.System) (*models.System, error)); ok {
		return rf(ctx, system)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.System) *models.System); ok {
		r0 = rf(ctx, system)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.System)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.System) error); ok {
		r1 = rf(ctx, system)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSystemRepositoryInterface creates a new instance of SystemRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSystemRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *SystemRepositoryInterface {
	mock := &SystemRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
