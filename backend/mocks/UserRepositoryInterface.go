// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	models "ocserv-bakend/internal/models"

	mock "github.com/stretchr/testify/mock"

	request "ocserv-bakend/pkg/request"
)

// UserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryInterface struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: ctx, uid, password, salt
func (_m *UserRepositoryInterface) ChangePassword(ctx context.Context, uid string, password string, salt string) error {
	ret := _m.Called(ctx, uid, password, salt)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, uid, password, salt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateToken provides a mock function with given fields: ctx, id, uid, rememberMe, isAdmin
func (_m *UserRepositoryInterface) CreateToken(ctx context.Context, id uint, uid string, rememberMe bool, isAdmin bool) (string, error) {
	ret := _m.Called(ctx, id, uid, rememberMe, isAdmin)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, bool, bool) (string, error)); ok {
		return rf(ctx, id, uid, rememberMe, isAdmin)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint, string, bool, bool) string); ok {
		r0 = rf(ctx, id, uid, rememberMe, isAdmin)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint, string, bool, bool) error); ok {
		r1 = rf(ctx, id, uid, rememberMe, isAdmin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserRepositoryInterface) CreateUser(ctx context.Context, user *models.User) (*models.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) (*models.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) *models.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, uid
func (_m *UserRepositoryInterface) DeleteUser(ctx context.Context, uid string) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUsername provides a mock function with given fields: ctx, username
func (_m *UserRepositoryInterface) GetByUsername(ctx context.Context, username string) (*models.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Users provides a mock function with given fields: ctx, pagination
func (_m *UserRepositoryInterface) Users(ctx context.Context, pagination *request.Pagination) (*[]models.User, int64, error) {
	ret := _m.Called(ctx, pagination)

	if len(ret) == 0 {
		panic("no return value specified for Users")
	}

	var r0 *[]models.User
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.Pagination) (*[]models.User, int64, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.Pagination) *[]models.User); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.Pagination) int64); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *request.Pagination) error); ok {
		r2 = rf(ctx, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewUserRepositoryInterface creates a new instance of UserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositoryInterface {
	mock := &UserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
