// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	models "ocserv-bakend/internal/models"

	mock "github.com/stretchr/testify/mock"

	request "ocserv-bakend/pkg/request"
)

// OcservUserRepositoryInterface is an autogenerated mock type for the OcservUserRepositoryInterface type
type OcservUserRepositoryInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (_m *OcservUserRepositoryInterface) Create(ctx context.Context, user *models.OcservUser) (*models.OcservUser, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.OcservUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.OcservUser) (*models.OcservUser, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.OcservUser) *models.OcservUser); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OcservUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.OcservUser) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, uid
func (_m *OcservUserRepositoryInterface) Delete(ctx context.Context, uid string) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUID provides a mock function with given fields: ctx, uid
func (_m *OcservUserRepositoryInterface) GetByUID(ctx context.Context, uid string) (*models.OcservUser, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetByUID")
	}

	var r0 *models.OcservUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.OcservUser, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.OcservUser); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OcservUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Lock provides a mock function with given fields: ctx, uid
func (_m *OcservUserRepositoryInterface) Lock(ctx context.Context, uid string) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for Lock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnLock provides a mock function with given fields: ctx, uid
func (_m *OcservUserRepositoryInterface) UnLock(ctx context.Context, uid string) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for UnLock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, ocservUser
func (_m *OcservUserRepositoryInterface) Update(ctx context.Context, ocservUser *models.OcservUser) (*models.OcservUser, error) {
	ret := _m.Called(ctx, ocservUser)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.OcservUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.OcservUser) (*models.OcservUser, error)); ok {
		return rf(ctx, ocservUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.OcservUser) *models.OcservUser); ok {
		r0 = rf(ctx, ocservUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OcservUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.OcservUser) error); ok {
		r1 = rf(ctx, ocservUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Users provides a mock function with given fields: ctx, pagination
func (_m *OcservUserRepositoryInterface) Users(ctx context.Context, pagination *request.Pagination) (*[]models.OcservUser, int64, error) {
	ret := _m.Called(ctx, pagination)

	if len(ret) == 0 {
		panic("no return value specified for Users")
	}

	var r0 *[]models.OcservUser
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.Pagination) (*[]models.OcservUser, int64, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.Pagination) *[]models.OcservUser); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.OcservUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.Pagination) int64); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *request.Pagination) error); ok {
		r2 = rf(ctx, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewOcservUserRepositoryInterface creates a new instance of OcservUserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOcservUserRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OcservUserRepositoryInterface {
	mock := &OcservUserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
