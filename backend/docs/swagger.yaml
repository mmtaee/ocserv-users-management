basePath: /api
definitions:
  home.HomeResponse:
    properties:
      ipbans:
        items:
          $ref: '#/definitions/models.IPBan'
        type: array
      online_users_session:
        items:
          $ref: '#/definitions/models.OnlineUserSession'
        type: array
      stats:
        items:
          $ref: '#/definitions/models.DailyTraffic'
        type: array
      status:
        $ref: '#/definitions/home.StatsSections'
    required:
    - status
    type: object
  home.StatsSections:
    properties:
      current_stats:
        type: string
      general_info:
        type: string
    required:
    - current_stats
    - general_info
    type: object
  middlewares.PermissionDenied:
    properties:
      error:
        type: string
    type: object
  middlewares.Unauthorized:
    properties:
      error:
        type: string
    type: object
  models.DailyTraffic:
    properties:
      date:
        description: 'Format: YYYY-MM-DD'
        type: string
      rx:
        type: integer
      tx:
        type: integer
    type: object
  models.IPBan:
    properties:
      _Since:
        description: maps to "_Since" in JSON
        type: string
      IP:
        type: string
      Score:
        type: integer
      Since:
        type: string
    type: object
  models.OcservGroup:
    properties:
      config:
        allOf:
        - $ref: '#/definitions/models.OcservGroupConfig'
        description: or `type:text` for wider compatibility
      name:
        type: string
      uid:
        type: string
    required:
    - name
    - uid
    type: object
  models.OcservGroupConfig:
    properties:
      cgroup:
        description: 'Linux control group to assign the VPN worker process to. Format:
          ''controller,subsystem:name''. Example: ''cpuset,cpu:test'''
        type: string
      deny-roaming:
        description: 'Disconnect client if its IP changes (e.g., due to network switch).
          Example: true'
        type: boolean
      dns:
        description: 'Comma-separated list of DNS servers to assign to the client.
          Example: ''8.8.8.8,1.1.1.1'''
        items:
          type: string
        type: array
      dpd:
        description: 'Dead Peer Detection timeout in seconds. Example: 90'
        type: integer
      explicit-ipv4:
        description: 'Static IPv4 address to assign to client. Example: ''192.168.100.10'''
        type: string
      idle-timeout:
        description: 'Time in seconds before disconnecting idle clients. Example:
          600'
        type: integer
      ipv4-network:
        description: 'The pool of addresses that leases will be given from. Example:
          ''192.168.1.0/24'''
        type: string
      iroute:
        description: 'Internal route available only via VPN. Format: ''IP/prefix''.
          Example: ''10.0.0.0/8'''
        type: string
      keepalive:
        description: 'Interval in seconds to send keep-alive pings. Example: 60'
        type: integer
      max-same-clients:
        description: 'Maximum simultaneous logins per user. Example: 2'
        type: integer
      mobile-dpd:
        description: 'DPD timeout specifically for mobile clients. Example: 300'
        type: integer
      mobile-idle-timeout:
        description: 'Idle timeout for mobile clients. Example: 900'
        type: integer
      mtu:
        description: 'Tunnel interface MTU to avoid fragmentation. Example: 1400'
        type: integer
      nbns:
        description: 'NetBIOS Name Servers (WINS) for Windows clients. Example: ''192.168.1.1'''
        type: string
      net-priority:
        description: 'Priority for routes; lower is higher priority. Example: 1'
        type: integer
      no-route:
        description: 'List of networks to exclude from VPN routing. Each entry should
          be in ''IP/prefix'' format. Example: [''192.168.0.0/16'', ''10.0.0.0/8'']'
        items:
          type: string
        type: array
      no-udp:
        description: 'Disables UDP, enforcing TCP-only VPN connection. Example: true'
        type: boolean
      restrict-user-to-ports:
        description: 'Comma-separated list of allowed (or blocked, if negated) protocols
          and ports. Supports ''tcp(port)'', ''udp(port)'', ''icmp()'', ''icmpv6()'',
          and negation with ''!()''. Example: ''tcp(443), tcp(80), udp(53)'', or ''!(tcp(22),
          udp(1194))'''
        type: string
      restrict-user-to-routes:
        description: 'Allow client access only to defined routes. Example: true'
        type: boolean
      route:
        description: 'Routes pushed to the client for routing traffic. Example: [''0.0.0.0/0'',
          ''10.10.0.0/16'']'
        items:
          type: string
        type: array
      rx-data-per-sec:
        description: 'Maximum receive bandwidth in bytes per second. Example: ''100000''
          for 100 KB/s'
        type: integer
      session-timeout:
        description: 'Max session time in seconds before forced disconnect. Example:
          3600'
        type: integer
      split-dns:
        description: 'List of domains over which the provided DNS servers should be
          used. Example: [''example.com'', ''internal.company.com'']'
        items:
          type: string
        type: array
      stats-report-time:
        description: 'Interval in seconds for stats reporting. Example: 300'
        type: integer
      tunnel-all-dns:
        description: 'Force all DNS traffic through the VPN tunnel. Example: true'
        type: boolean
      tx-data-per-sec:
        description: 'Maximum transmit bandwidth in bytes per second. Example: ''200000''
          for 200 KB/s'
        type: integer
    type: object
  models.OcservUser:
    properties:
      config:
        $ref: '#/definitions/models.OcservUserConfig'
      created_at:
        type: string
      deactivated_at:
        type: string
      description:
        type: string
      expire_at:
        type: string
      group:
        type: string
      is_locked:
        type: boolean
      is_online:
        type: boolean
      password:
        type: string
      rx:
        description: Receive in bytes
        type: integer
      traffic_size:
        description: in GiB  >> x * 1024 ** 3
        type: integer
      traffic_type:
        enum:
        - Free
        - MonthlyTransmit
        - MonthlyReceive
        - TotallyTransmit
        - TotallyReceive
        type: string
      tx:
        description: Transmit in bytes
        type: integer
      uid:
        type: string
      updated_at:
        type: string
      username:
        type: string
    required:
    - created_at
    - group
    - is_locked
    - is_online
    - password
    - rx
    - traffic_size
    - traffic_type
    - tx
    - uid
    - username
    type: object
  models.OcservUserConfig:
    properties:
      banner:
        description: 'Text message shown to users when they connect to the VPN. Example:
          ''Welcome to the company VPN!'''
        type: string
      dns:
        description: 'Comma-separated list of DNS servers to assign to the user. Example:
          ''8.8.8.8,1.1.1.1'''
        items:
          type: string
        type: array
      explicit_ipv4:
        description: 'Static IPv4 address to assign to the user. Example: ''192.168.100.10'''
        type: string
      idle_timeout:
        description: 'Time in seconds before disconnecting idle users. Example: 600'
        type: integer
      ipv4_network:
        description: 'The pool of addresses from which to assign to the user. Example:
          ''192.168.1.0/24'''
        type: string
      iroute:
        description: 'Internal route available only via VPN. Example: ''10.0.0.0/8'''
        type: string
      mobile_idle_timeout:
        description: 'Idle timeout in seconds for mobile users. Example: 900'
        type: integer
      nbns:
        description: 'NetBIOS Name Servers (WINS) for Windows clients. Example: ''192.168.1.1'''
        type: string
      no_route:
        description: 'List of networks to exclude from VPN routing. Example: [''192.168.0.0/16'',
          ''10.0.0.0/8'']'
        items:
          type: string
        type: array
      rekey_time:
        description: 'Rekey time in seconds; triggers key renegotiation. Example:
          86400 for 24 hours'
        type: integer
      restrict_to_ports:
        description: 'Comma-separated list of allowed or blocked ports/protocols.
          Supports ''tcp(port)'', ''udp(port)'', ''icmp()'', ''icmpv6()'', and negation
          with ''!()''. Example: ''tcp(443), udp(53)'' or ''!(tcp(22), udp(1194))'''
        type: string
      restrict_to_routes:
        description: 'Allow user access only to defined routes. Example: true'
        type: boolean
      route:
        description: 'Routes pushed to the user for routing traffic. Example: [''0.0.0.0/0'',
          ''10.10.0.0/16'']'
        items:
          type: string
        type: array
      session_timeout:
        description: 'Maximum session time in seconds before forced disconnect. Example:
          3600'
        type: integer
      split_dns:
        description: 'List of domains over which the provided DNS servers should be
          used. Example: [''example.com'', ''internal.company.com'']'
        items:
          type: string
        type: array
    type: object
  models.OnlineUserSession:
    properties:
      _Connected at:
        type: string
      Average RX:
        type: string
      Average TX:
        type: string
      Groupname:
        type: string
      Username:
        type: string
    type: object
  models.System:
    properties:
      _:
        type: integer
      google_captcha_secret:
        type: string
      google_captcha_site_key:
        type: string
    type: object
  models.User:
    properties:
      _:
        type: integer
      createdAt:
        description: LastLogin *time.Time `json:"last_login"  validate:"required"`
        type: string
      is_admin:
        type: boolean
      uid:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    required:
    - _
    - is_admin
    - uid
    - username
    type: object
  ocserv_group.CreateOcservGroupData:
    properties:
      config:
        $ref: '#/definitions/models.OcservGroupConfig'
      name:
        type: string
    required:
    - config
    - name
    type: object
  ocserv_group.OcservGroupsResponse:
    properties:
      meta:
        $ref: '#/definitions/request.Meta'
      result:
        items:
          $ref: '#/definitions/models.OcservGroup'
        type: array
    required:
    - meta
    type: object
  ocserv_group.UpdateOcservGroupData:
    properties:
      config:
        $ref: '#/definitions/models.OcservGroupConfig'
    required:
    - config
    type: object
  ocserv_user.CreateOcservUserData:
    properties:
      description:
        example: User for testing VPN access
        maxLength: 1024
        type: string
      expire_at:
        example: "2025-12-31"
        type: string
      group:
        type: string
      password:
        maxLength: 32
        minLength: 2
        type: string
      traffic_size:
        description: 10 GiB
        example: 10737418240
        minimum: 0
        type: integer
      traffic_type:
        enum:
        - Free
        - MonthlyTransmit
        - MonthlyReceive
        - TotallyTransmit
        - TotallyReceive
        example: MonthlyTransmit
        type: string
      username:
        maxLength: 32
        minLength: 2
        type: string
    required:
    - group
    - password
    - traffic_type
    - username
    type: object
  ocserv_user.OcservUsersResponse:
    properties:
      meta:
        $ref: '#/definitions/request.Meta'
      result:
        items:
          $ref: '#/definitions/models.OcservUser'
        type: array
    required:
    - meta
    type: object
  ocserv_user.UpdateOcservUserData:
    properties:
      description:
        example: User for testing VPN access
        maxLength: 1024
        type: string
      expire_at:
        example: "2025-12-31"
        type: string
      group:
        example: default
        type: string
      password:
        example: strongpassword123
        minLength: 6
        type: string
      traffic_size:
        description: 10 GiB
        example: 10737418240
        type: integer
      traffic_type:
        enum:
        - Free
        - MonthlyTransmit
        - MonthlyReceive
        - TotallyTransmit
        - TotallyReceive
        example: MonthlyTransmit
        type: string
    type: object
  request.ErrorResponse:
    properties:
      error:
        items:
          type: string
        type: array
      message:
        items:
          type: string
        type: array
    required:
    - error
    - message
    type: object
  request.Meta:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total_records:
        type: integer
    required:
    - page
    - page_size
    - total_records
    type: object
  system.ChangeUserPassword:
    properties:
      password:
        type: string
    required:
    - password
    type: object
  system.CreateUserData:
    properties:
      admin:
        type: boolean
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  system.GetSystemInitResponse:
    properties:
      google_captcha_site_key:
        type: string
    type: object
  system.GetSystemResponse:
    properties:
      google_captcha_secret_key:
        type: string
      google_captcha_site_key:
        type: string
    type: object
  system.LoginData:
    properties:
      password:
        example: doe123456
        maxLength: 16
        minLength: 2
        type: string
      remember_me:
        type: boolean
      token:
        type: string
      username:
        example: john_doe
        maxLength: 16
        minLength: 2
        type: string
    required:
    - password
    - username
    type: object
  system.PatchSystemUpdateData:
    properties:
      google_captcha_secret_key:
        type: string
      google_captcha_site_key:
        type: string
    required:
    - google_captcha_secret_key
    - google_captcha_site_key
    type: object
  system.SetupSystem:
    properties:
      google_captcha_secret_key:
        type: string
      google_captcha_site_key:
        type: string
      password:
        maxLength: 16
        minLength: 4
        type: string
      username:
        maxLength: 16
        minLength: 2
        type: string
    required:
    - password
    - username
    type: object
  system.SetupSystemResponse:
    properties:
      system:
        $ref: '#/definitions/models.System'
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    required:
    - system
    - token
    - user
    type: object
  system.UserLoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    required:
    - token
    - user
    type: object
  system.UsersResponse:
    properties:
      meta:
        $ref: '#/definitions/request.Meta'
      result:
        items:
          $ref: '#/definitions/models.User'
        type: array
    required:
    - meta
    type: object
info:
  contact: {}
  description: This is a sample Ocserv User management Api server.
  title: Ocserv User management Example Api
  version: "1.0"
paths:
  /home:
    get:
      consumes:
      - application/json
      description: Content of home
      parameters:
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/home.HomeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: Content of home
      tags:
      - Home
  /ocserv/groups:
    get:
      consumes:
      - application/json
      description: List of Ocserv groups
      parameters:
      - description: Page number, starting from 1
        in: query
        minimum: 1
        name: page
        type: integer
      - description: Number of items per page
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      - description: Field to order by
        in: query
        name: order
        type: string
      - description: Sort order, either ASC or DESC
        enum:
        - ASC
        - DESC
        in: query
        name: sort
        type: string
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ocserv_group.OcservGroupsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: List of Ocserv groups
      tags:
      - Ocserv(Groups)
    post:
      consumes:
      - application/json
      description: Ocserv Group creation
      parameters:
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      - description: ocserv group create data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ocserv_group.CreateOcservGroupData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.OcservGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: Ocserv Group creation
      tags:
      - Ocserv(Groups)
  /ocserv/groups/{uid}:
    delete:
      consumes:
      - application/json
      description: Ocserv Group delete
      parameters:
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      - description: Ocserv Group ID
        in: path
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: Ocserv Group delete
      tags:
      - Ocserv(Groups)
    patch:
      consumes:
      - application/json
      description: Ocserv Group update
      parameters:
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      - description: Ocserv Group ID
        in: path
        name: uid
        required: true
        type: integer
      - description: ocserv group create data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ocserv_group.UpdateOcservGroupData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.OcservGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: Ocserv Group update
      tags:
      - Ocserv(Groups)
  /ocserv/groups/lookup:
    get:
      consumes:
      - application/json
      description: List of Ocserv group names
      parameters:
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: List of Ocserv group names
      tags:
      - Ocserv(Groups)
  /ocserv/users:
    get:
      consumes:
      - application/json
      description: List of Ocserv Users
      parameters:
      - description: Page number, starting from 1
        in: query
        minimum: 1
        name: page
        type: integer
      - description: Number of items per page
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      - description: Field to order by
        in: query
        name: order
        type: string
      - description: Sort order, either ASC or DESC
        enum:
        - ASC
        - DESC
        in: query
        name: sort
        type: string
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ocserv_user.OcservUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: List of Ocserv Users
      tags:
      - Ocserv(Users)
    post:
      consumes:
      - application/json
      description: Ocserv User creation
      parameters:
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      - description: ocserv user create data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ocserv_user.CreateOcservUserData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.OcservUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: Ocserv User creation
      tags:
      - Ocserv(Users)
  /ocserv/users/{uid}:
    delete:
      consumes:
      - application/json
      description: Ocserv User delete
      parameters:
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      - description: Ocserv User UID
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: Ocserv User delete
      tags:
      - Ocserv(Users)
    patch:
      consumes:
      - application/json
      description: Ocserv User update
      parameters:
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      - description: Ocserv User UID
        in: path
        name: uid
        required: true
        type: string
      - description: ocserv user update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/ocserv_user.UpdateOcservUserData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.OcservUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: Ocserv User update
      tags:
      - Ocserv(Users)
  /ocserv/users/{uid}/lock:
    post:
      consumes:
      - application/json
      description: Ocserv User locking
      parameters:
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      - description: Ocserv User UID
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: Ocserv User locking
      tags:
      - Ocserv(Users)
  /ocserv/users/{uid}/unlock:
    post:
      consumes:
      - application/json
      description: Ocserv User unlocking
      parameters:
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      - description: Ocserv User UID
        in: path
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: Ocserv User unlocking
      tags:
      - Ocserv(Users)
  /system:
    get:
      consumes:
      - application/json
      description: Get panel System Config
      parameters:
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/system.GetSystemResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: Get panel System Config
      tags:
      - System
    patch:
      consumes:
      - application/json
      description: Update panel System Config
      parameters:
      - description: update system config data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/system.PatchSystemUpdateData'
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/system.GetSystemResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: Update panel System Config
      tags:
      - System
  /system/init:
    get:
      consumes:
      - application/json
      description: Get panel System init Config
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/system.GetSystemInitResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
      summary: Get panel System init Config
      tags:
      - System
  /system/setup:
    post:
      consumes:
      - application/json
      description: Setup user and system config
      parameters:
      - description: system setup data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/system.SetupSystem'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/system.SetupSystemResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
      summary: Setup user and system config
      tags:
      - System
  /system/users:
    get:
      consumes:
      - application/json
      description: List of Admin or simple users
      parameters:
      - description: Page number, starting from 1
        in: query
        minimum: 1
        name: page
        type: integer
      - description: Number of items per page
        in: query
        maximum: 100
        minimum: 1
        name: page_size
        type: integer
      - description: Field to order by
        in: query
        name: order
        type: string
      - description: Sort order, either ASC or DESC
        enum:
        - ASC
        - DESC
        in: query
        name: sort
        type: string
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/system.UsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middlewares.PermissionDenied'
      summary: List of Admin or simple users
      tags:
      - System(Users)
    post:
      consumes:
      - application/json
      description: Create user Admin or simple
      parameters:
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      - description: create user data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/system.CreateUserData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middlewares.PermissionDenied'
      summary: Create user
      tags:
      - System(Users)
  /system/users/{uid}:
    delete:
      consumes:
      - application/json
      description: Delete simple user
      parameters:
      - description: User ID
        in: path
        name: uid
        required: true
        type: integer
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middlewares.PermissionDenied'
      summary: Delete simple user
      tags:
      - System(Users)
  /system/users/{uid}/password:
    post:
      consumes:
      - application/json
      description: Change user password by admin
      parameters:
      - description: User ID
        in: path
        name: uid
        required: true
        type: integer
      - description: user new password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/system.ChangeUserPassword'
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/system.UsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/middlewares.PermissionDenied'
      summary: Change user password by admin
      tags:
      - System(Users)
  /system/users/login:
    post:
      consumes:
      - application/json
      description: Admin users login with Google captcha(captcha site key required
        in get config api)
      parameters:
      - description: login data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/system.LoginData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/system.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
      summary: Admin users login
      tags:
      - System(Users)
  /system/users/password:
    post:
      consumes:
      - application/json
      description: Change user password by self
      parameters:
      - description: user new password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/system.ChangeUserPassword'
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/system.UsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: Change user password by self
      tags:
      - System(Users)
  /system/users/profile:
    get:
      consumes:
      - application/json
      description: Get User Profile
      parameters:
      - description: Bearer TOKEN
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/request.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/middlewares.Unauthorized'
      summary: Get User Profile
      tags:
      - System(Users)
swagger: "2.0"
