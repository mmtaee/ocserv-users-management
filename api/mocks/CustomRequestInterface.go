// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	request "api/pkg/request"
)

// CustomRequestInterface is an autogenerated mock type for the CustomRequestInterface type
type CustomRequestInterface struct {
	mock.Mock
}

// BadRequest provides a mock function with given fields: c, err, msg
func (_m *CustomRequestInterface) BadRequest(c echo.Context, err interface{}, msg ...string) error {
	_va := make([]interface{}, len(msg))
	for _i := range msg {
		_va[_i] = msg[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, c, err)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BadRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context, interface{}, ...string) error); ok {
		r0 = rf(c, err, msg...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoValidate provides a mock function with given fields: _a0, _a1
func (_m *CustomRequestInterface) DoValidate(_a0 echo.Context, _a1 interface{}) interface{} {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DoValidate")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(echo.Context, interface{}) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Pagination provides a mock function with given fields: c
func (_m *CustomRequestInterface) Pagination(c echo.Context) *request.Pagination {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Pagination")
	}

	var r0 *request.Pagination
	if rf, ok := ret.Get(0).(func(echo.Context) *request.Pagination); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Pagination)
		}
	}

	return r0
}

// NewCustomRequestInterface creates a new instance of CustomRequestInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomRequestInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomRequestInterface {
	mock := &CustomRequestInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
