// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/home": {
            "get": {
                "description": "Content of home",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Home"
                ],
                "summary": "Content of home",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/home.GetHomeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            }
        },
        "/logs/audit": {
            "get": {
                "description": "List of logs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logs"
                ],
                "summary": "List of logs",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number, starting from 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Field to order by",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ASC",
                            "DESC"
                        ],
                        "type": "string",
                        "description": "Sort order, either ASC or DESC",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search User by UID",
                        "name": "uid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/log.UsersLogsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middlewares.PermissionDenied"
                        }
                    }
                }
            }
        },
        "/logs/users": {
            "get": {
                "description": "List of Users logs on self user model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Logs(Users)"
                ],
                "summary": "List of Users logs on self user model",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number, starting from 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Field to order by",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ASC",
                            "DESC"
                        ],
                        "type": "string",
                        "description": "Sort order, either ASC or DESC",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/log.UsersLogsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            }
        },
        "/occtl/commands": {
            "get": {
                "description": "Occtl Commands",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OCCTL"
                ],
                "summary": "Occtl Commands",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Command Action ID (1 to 15)",
                        "name": "action",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional parameter depending on command",
                        "name": "value",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            }
        },
        "/occtl/server_info": {
            "get": {
                "description": "Server information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OCCTL"
                ],
                "summary": "Server information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ServerVersion"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ocserv/groups": {
            "get": {
                "description": "List of Ocserv groups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ocserv(Groups)"
                ],
                "summary": "List of Ocserv groups",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number, starting from 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Field to order by",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ASC",
                            "DESC"
                        ],
                        "type": "string",
                        "description": "Sort order, either ASC or DESC",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ocserv_group.OcservGroupsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            },
            "post": {
                "description": "Ocserv Group creation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ocserv(Groups)"
                ],
                "summary": "Ocserv Group creation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "ocserv group create data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ocserv_group.CreateOcservGroupData"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.OcservGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            }
        },
        "/ocserv/groups/defaults": {
            "get": {
                "description": "Ocserv Defaults Group config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ocserv(Groups)"
                ],
                "summary": "Ocserv Defaults Group config",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update Ocserv Defaults Group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ocserv(Groups)"
                ],
                "summary": "Update Ocserv Defaults Group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "ocserv group default data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ocserv_group.UpdateOcservGroupData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            }
        },
        "/ocserv/groups/lookup": {
            "get": {
                "description": "List of Ocserv group names",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ocserv(Groups)"
                ],
                "summary": "List of Ocserv group names",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            }
        },
        "/ocserv/groups/{id}": {
            "delete": {
                "description": "Ocserv Group delete",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ocserv(Groups)"
                ],
                "summary": "Ocserv Group delete",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Ocserv Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            },
            "patch": {
                "description": "Ocserv Group update",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ocserv(Groups)"
                ],
                "summary": "Ocserv Group update",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Ocserv Group ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ocserv group create data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ocserv_group.UpdateOcservGroupData"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.OcservGroup"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            }
        },
        "/ocserv/users": {
            "get": {
                "description": "List of Ocserv Users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ocserv(Users)"
                ],
                "summary": "List of Ocserv Users",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number, starting from 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Field to order by",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ASC",
                            "DESC"
                        ],
                        "type": "string",
                        "description": "Sort order, either ASC or DESC",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ocserv_user.OcservUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            },
            "post": {
                "description": "Ocserv User creation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ocserv(Users)"
                ],
                "summary": "Ocserv User creation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "ocserv user create data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ocserv_user.CreateOcservUserData"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.OcservUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            }
        },
        "/ocserv/users/statistics": {
            "get": {
                "description": "Ocserv Users Statistics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ocserv(Statistics)"
                ],
                "summary": "Ocserv Users Statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "date_start",
                        "name": "date_start",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "date_end",
                        "name": "date_end",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DailyTraffic"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            }
        },
        "/ocserv/users/{uid}": {
            "delete": {
                "description": "Ocserv User delete",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ocserv(Users)"
                ],
                "summary": "Ocserv User delete",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ocserv User UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            },
            "patch": {
                "description": "Ocserv User update",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ocserv(Users)"
                ],
                "summary": "Ocserv User update",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ocserv User UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ocserv user update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ocserv_user.UpdateOcservUserData"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.OcservUser"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            }
        },
        "/ocserv/users/{uid}/lock": {
            "post": {
                "description": "Ocserv User locking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ocserv(Users)"
                ],
                "summary": "Ocserv User locking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ocserv User UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            }
        },
        "/ocserv/users/{uid}/statistics": {
            "get": {
                "description": "Ocserv User Statistics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ocserv(Users)"
                ],
                "summary": "Ocserv User Statistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ocserv User UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "date_start",
                        "name": "date_start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "date_end",
                        "name": "date_end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DailyTraffic"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            }
        },
        "/ocserv/users/{uid}/unlock": {
            "post": {
                "description": "Ocserv User unlocking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ocserv(Users)"
                ],
                "summary": "Ocserv User unlocking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ocserv User UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            }
        },
        "/ocserv/users/{username}/disconnect": {
            "post": {
                "description": "Disconnect Ocserv User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Ocserv(Users)"
                ],
                "summary": "Disconnect Ocserv User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ocserv User username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            }
        },
        "/system": {
            "get": {
                "description": "Get panel System Config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get panel System Config",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/system.GetSystemResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update panel System Config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Update panel System Config",
                "parameters": [
                    {
                        "description": "update system config data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/system.PatchSystemUpdateData"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/system.GetSystemResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            }
        },
        "/system/init": {
            "get": {
                "description": "Get panel System init Config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get panel System init Config",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/system.GetSystemInitResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/system/setup": {
            "post": {
                "description": "Setup user and system config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Setup user and system config",
                "parameters": [
                    {
                        "description": "system setup data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/system.SetupSystem"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/system.SetupSystemResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/system/users": {
            "get": {
                "description": "List of Admin or simple users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System(Users)"
                ],
                "summary": "List of Admin or simple users",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Page number, starting from 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Field to order by",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "ASC",
                            "DESC"
                        ],
                        "type": "string",
                        "description": "Sort order, either ASC or DESC",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/system.UsersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middlewares.PermissionDenied"
                        }
                    }
                }
            },
            "post": {
                "description": "Create user Admin or simple",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System(Users)"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "create user data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/system.CreateUserData"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middlewares.PermissionDenied"
                        }
                    }
                }
            }
        },
        "/system/users/login": {
            "post": {
                "description": "Admin users login with Google captcha(captcha site key required in get config api)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System(Users)"
                ],
                "summary": "Admin users login",
                "parameters": [
                    {
                        "description": "login data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/system.LoginData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/system.UserLoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/system/users/lookup": {
            "get": {
                "description": "List of Users Lookup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System(Users)"
                ],
                "summary": "List of Users Lookup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UsersLookup"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middlewares.PermissionDenied"
                        }
                    }
                }
            }
        },
        "/system/users/password": {
            "post": {
                "description": "Change user password by self",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System(Users)"
                ],
                "summary": "Change user password by self",
                "parameters": [
                    {
                        "description": "user new password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/system.ChangeUserPasswordBySelf"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/system.UsersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            }
        },
        "/system/users/profile": {
            "get": {
                "description": "Get User Profile",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System(Users)"
                ],
                "summary": "Get User Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    }
                }
            }
        },
        "/system/users/{uid}": {
            "delete": {
                "description": "Delete simple user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System(Users)"
                ],
                "summary": "Delete simple user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middlewares.PermissionDenied"
                        }
                    }
                }
            }
        },
        "/system/users/{uid}/password": {
            "post": {
                "description": "Change user password by admin",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System(Users)"
                ],
                "summary": "Change user password by admin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "user new password",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/system.ChangeUserPassword"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer TOKEN",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/system.UsersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/request.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/middlewares.Unauthorized"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/middlewares.PermissionDenied"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "audit_log.AuditLog": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "action and reason json string",
                    "type": "string"
                },
                "changes": {
                    "description": "Full JSON or JSON diff",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "model": {
                    "description": "e.g., \"OcservUser\"",
                    "type": "string"
                },
                "model_id": {
                    "description": "e.g., UID or primary key",
                    "type": "string"
                },
                "user_uid": {
                    "description": "ULID or user identifier",
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "home.CurrentStats": {
            "type": "object",
            "properties": {
                "Authentication failures": {
                    "type": "integer"
                },
                "Average auth time": {
                    "type": "string"
                },
                "Average session time": {
                    "type": "string"
                },
                "Closed due to error sessions": {
                    "type": "integer"
                },
                "Last stats reset": {
                    "type": "string"
                },
                "Max auth time": {
                    "type": "string"
                },
                "Max session time": {
                    "type": "string"
                },
                "RX": {
                    "type": "string"
                },
                "Sessions handled": {
                    "type": "integer"
                },
                "TX": {
                    "type": "string"
                },
                "Timed out (idle) sessions": {
                    "type": "integer"
                },
                "Timed out sessions": {
                    "type": "integer"
                },
                "_Last stats reset": {
                    "type": "string"
                },
                "raw_avg_auth_time": {
                    "type": "integer"
                },
                "raw_avg_session_time": {
                    "type": "integer"
                },
                "raw_last_stats_reset": {
                    "type": "integer"
                },
                "raw_max_auth_time": {
                    "type": "integer"
                },
                "raw_max_session_time": {
                    "type": "integer"
                },
                "raw_rx": {
                    "description": "raw fields if you want",
                    "type": "integer"
                },
                "raw_tx": {
                    "type": "integer"
                }
            }
        },
        "home.GeneralInfo": {
            "type": "object",
            "properties": {
                "Active sessions": {
                    "type": "integer"
                },
                "IPs in ban list": {
                    "type": "integer"
                },
                "Median latency": {
                    "type": "string"
                },
                "STDEV latency": {
                    "type": "string"
                },
                "Sec-mod PID": {
                    "type": "integer"
                },
                "Sec-mod instance count": {
                    "type": "integer"
                },
                "Server PID": {
                    "type": "integer"
                },
                "Status": {
                    "type": "string"
                },
                "Total authentication failures": {
                    "type": "integer"
                },
                "Total sessions": {
                    "type": "integer"
                },
                "Up since": {
                    "type": "string"
                },
                "_Up since": {
                    "type": "string"
                },
                "raw_median_latency": {
                    "description": "raw fields if you want",
                    "type": "integer"
                },
                "raw_stdev_latency": {
                    "type": "integer"
                },
                "raw_up_since": {
                    "type": "integer"
                },
                "uptime": {
                    "type": "integer"
                }
            }
        },
        "home.GetHomeResponse": {
            "type": "object",
            "required": [
                "server_status"
            ],
            "properties": {
                "ipbans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.IPBan"
                    }
                },
                "online_users_session": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.OnlineUserSession"
                    }
                },
                "server_status": {
                    "$ref": "#/definitions/home.ServerStatusResponse"
                },
                "statistics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DailyTraffic"
                    }
                }
            }
        },
        "home.ServerStatusResponse": {
            "type": "object",
            "properties": {
                "current_stats": {
                    "$ref": "#/definitions/home.CurrentStats"
                },
                "general_info": {
                    "$ref": "#/definitions/home.GeneralInfo"
                }
            }
        },
        "log.UsersLogsResponse": {
            "type": "object",
            "required": [
                "meta"
            ],
            "properties": {
                "meta": {
                    "$ref": "#/definitions/request.Meta"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/audit_log.AuditLog"
                    }
                }
            }
        },
        "middlewares.PermissionDenied": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "middlewares.Unauthorized": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.DailyTraffic": {
            "type": "object",
            "properties": {
                "date": {
                    "description": "Format: YYYY-MM-DD",
                    "type": "string"
                },
                "rx": {
                    "description": "in GiB",
                    "type": "number"
                },
                "tx": {
                    "description": "in GiB",
                    "type": "number"
                }
            }
        },
        "models.IPBan": {
            "type": "object",
            "properties": {
                "IP": {
                    "type": "string"
                },
                "Score": {
                    "type": "integer"
                },
                "Since": {
                    "type": "string"
                },
                "_Since": {
                    "description": "maps to \"_Since\" in JSON",
                    "type": "string"
                }
            }
        },
        "models.OcservGroup": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "config": {
                    "$ref": "#/definitions/models.OcservGroupConfig"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.OcservGroupConfig": {
            "type": "object",
            "properties": {
                "cgroup": {
                    "description": "Linux control group to assign the VPN worker process to. Format: 'controller,subsystem:name'. Example: 'cpuset,cpu:test'",
                    "type": "string"
                },
                "deny-roaming": {
                    "description": "Disconnect client if its IP changes (e.g., due to network switch). Example: true",
                    "type": "boolean"
                },
                "dns": {
                    "description": "Comma-separated list of DNS servers to assign to the client. Example: '8.8.8.8,1.1.1.1'",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dpd": {
                    "description": "Dead Peer Detection timeout in seconds. Example: 90",
                    "type": "integer"
                },
                "explicit-ipv4": {
                    "description": "Static IPv4 address to assign to client. Example: '192.168.100.10'",
                    "type": "string"
                },
                "idle-timeout": {
                    "description": "Time in seconds before disconnecting idle clients. Example: 600",
                    "type": "integer"
                },
                "ipv4-network": {
                    "description": "The pool of addresses that leases will be given from. Example: '192.168.1.0/24'",
                    "type": "string"
                },
                "iroute": {
                    "description": "Internal route available only via VPN. Format: 'IP/prefix'. Example: '10.0.0.0/8'",
                    "type": "string"
                },
                "keepalive": {
                    "description": "Interval in seconds to send keep-alive pings. Example: 60",
                    "type": "integer"
                },
                "max-same-clients": {
                    "description": "Maximum simultaneous logins per user. Example: 2",
                    "type": "integer"
                },
                "mobile-dpd": {
                    "description": "DPD timeout specifically for mobile clients. Example: 300",
                    "type": "integer"
                },
                "mobile-idle-timeout": {
                    "description": "Idle timeout for mobile clients. Example: 900",
                    "type": "integer"
                },
                "mtu": {
                    "description": "Tunnel interface MTU to avoid fragmentation. Example: 1400",
                    "type": "integer"
                },
                "nbns": {
                    "description": "NetBIOS Name Servers (WINS) for Windows clients. Example: '192.168.1.1'",
                    "type": "string"
                },
                "net-priority": {
                    "description": "Priority for routes; lower is higher priority. Example: 1",
                    "type": "integer"
                },
                "no-route": {
                    "description": "List of networks to exclude from VPN routing. Each entry should be in 'IP/prefix' format. Example: ['192.168.0.0/16', '10.0.0.0/8']",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "no-udp": {
                    "description": "Disables UDP, enforcing TCP-only VPN connection. Example: true",
                    "type": "boolean"
                },
                "restrict-user-to-ports": {
                    "description": "Comma-separated list of allowed (or blocked, if negated) protocols and ports. Supports 'tcp(port)', 'udp(port)', 'icmp()', 'icmpv6()', and negation with '!()'. Example: 'tcp(443), tcp(80), udp(53)', or '!(tcp(22), udp(1194))'",
                    "type": "string"
                },
                "restrict-user-to-routes": {
                    "description": "Allow client access only to defined routes. Example: true",
                    "type": "boolean"
                },
                "route": {
                    "description": "Routes pushed to the client for routing traffic. Example: ['0.0.0.0/0', '10.10.0.0/16']",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "rx-data-per-sec": {
                    "description": "Maximum receive bandwidth in bytes per second. Example: '100000' for 100 KB/s",
                    "type": "integer"
                },
                "session-timeout": {
                    "description": "Max session time in seconds before forced disconnect. Example: 3600",
                    "type": "integer"
                },
                "split-dns": {
                    "description": "List of domains over which the provided DNS servers should be used. Example: ['example.com', 'internal.company.com']",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "stats-report-time": {
                    "description": "Interval in seconds for stats reporting. Example: 300",
                    "type": "integer"
                },
                "tunnel-all-dns": {
                    "description": "Force all DNS traffic through the VPN tunnel. Example: true",
                    "type": "boolean"
                },
                "tx-data-per-sec": {
                    "description": "Maximum transmit bandwidth in bytes per second. Example: '200000' for 200 KB/s",
                    "type": "integer"
                }
            }
        },
        "models.OcservUser": {
            "type": "object",
            "required": [
                "created_at",
                "group",
                "is_locked",
                "is_online",
                "password",
                "rx",
                "traffic_size",
                "traffic_type",
                "tx",
                "uid",
                "username"
            ],
            "properties": {
                "config": {
                    "$ref": "#/definitions/models.OcservUserConfig"
                },
                "created_at": {
                    "type": "string"
                },
                "deactivated_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "expire_at": {
                    "type": "string"
                },
                "group": {
                    "type": "string"
                },
                "is_locked": {
                    "type": "boolean"
                },
                "is_online": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string"
                },
                "rx": {
                    "description": "Receive in bytes",
                    "type": "integer"
                },
                "traffic_size": {
                    "description": "in GiB  \u003e\u003e x * 1024 ** 3",
                    "type": "integer"
                },
                "traffic_type": {
                    "type": "string",
                    "enum": [
                        "Free",
                        "MonthlyTransmit",
                        "MonthlyReceive",
                        "TotallyTransmit",
                        "TotallyReceive"
                    ]
                },
                "tx": {
                    "description": "Transmit in bytes",
                    "type": "integer"
                },
                "uid": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.OcservUserConfig": {
            "type": "object",
            "properties": {
                "banner": {
                    "description": "Text message shown to users when they connect to the VPN. Example: 'Welcome to the company VPN!'",
                    "type": "string"
                },
                "dns": {
                    "description": "Comma-separated list of DNS servers to assign to the user. Example: '8.8.8.8,1.1.1.1'",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "explicit-ipv4": {
                    "description": "Static IPv4 address to assign to the user. Example: '192.168.100.10'",
                    "type": "string"
                },
                "idle-timeout": {
                    "description": "Time in seconds before disconnecting idle users. Example: 600",
                    "type": "integer"
                },
                "ipv4-network": {
                    "description": "The pool of addresses from which to assign to the user. Example: '192.168.1.0/24'",
                    "type": "string"
                },
                "iroute": {
                    "description": "Internal route available only via VPN. Example: '10.0.0.0/8'",
                    "type": "string"
                },
                "mobile-idle-timeout": {
                    "description": "Idle timeout in seconds for mobile users. Example: 900",
                    "type": "integer"
                },
                "nbns": {
                    "description": "NetBIOS Name Servers (WINS) for Windows clients. Example: '192.168.1.1'",
                    "type": "string"
                },
                "no-route": {
                    "description": "List of networks to exclude from VPN routing. Example: ['192.168.0.0/16', '10.0.0.0/8']",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "rekey-time": {
                    "description": "Rekey time in seconds; triggers key renegotiation. Example: 86400 for 24 hours",
                    "type": "integer"
                },
                "restrict-to-ports": {
                    "description": "Comma-separated list of allowed or blocked ports/protocols. Supports 'tcp(port)', 'udp(port)', 'icmp()', 'icmpv6()', and negation with '!()'. Example: 'tcp(443), udp(53)' or '!(tcp(22), udp(1194))'",
                    "type": "string"
                },
                "restrict-to-routes": {
                    "description": "Allow user access only to defined routes. Example: true",
                    "type": "boolean"
                },
                "route": {
                    "description": "Routes pushed to the user for routing traffic. Example: ['0.0.0.0/0', '10.10.0.0/16']",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "session-timeout": {
                    "description": "Maximum session time in seconds before forced disconnect. Example: 3600",
                    "type": "integer"
                },
                "split-dns": {
                    "description": "List of domains over which the provided DNS servers should be used. Example: ['example.com', 'internal.company.com']",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.OnlineUserSession": {
            "type": "object",
            "properties": {
                "Average RX": {
                    "type": "string"
                },
                "Average TX": {
                    "type": "string"
                },
                "Groupname": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                },
                "_Connected at": {
                    "type": "string"
                }
            }
        },
        "models.ServerVersion": {
            "type": "object",
            "properties": {
                "occtl_version": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.System": {
            "type": "object",
            "properties": {
                "_": {
                    "type": "integer"
                },
                "google_captcha_secret": {
                    "type": "string"
                },
                "google_captcha_site_key": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "is_admin",
                "last_login",
                "uid",
                "username"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "is_admin": {
                    "type": "boolean"
                },
                "last_login": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.UsersLookup": {
            "type": "object",
            "required": [
                "uid",
                "username"
            ],
            "properties": {
                "uid": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "ocserv_group.CreateOcservGroupData": {
            "type": "object",
            "required": [
                "config",
                "name"
            ],
            "properties": {
                "config": {
                    "$ref": "#/definitions/models.OcservGroupConfig"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "ocserv_group.OcservGroupsResponse": {
            "type": "object",
            "required": [
                "meta"
            ],
            "properties": {
                "meta": {
                    "$ref": "#/definitions/request.Meta"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.OcservGroup"
                    }
                }
            }
        },
        "ocserv_group.UpdateOcservGroupData": {
            "type": "object",
            "required": [
                "config"
            ],
            "properties": {
                "config": {
                    "$ref": "#/definitions/models.OcservGroupConfig"
                }
            }
        },
        "ocserv_user.CreateOcservUserData": {
            "type": "object",
            "required": [
                "group",
                "password",
                "traffic_type",
                "username"
            ],
            "properties": {
                "config": {
                    "$ref": "#/definitions/models.OcservUserConfig"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1024,
                    "example": "User for testing VPN access"
                },
                "expire_at": {
                    "type": "string",
                    "example": "2025-12-31"
                },
                "group": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 2
                },
                "traffic_size": {
                    "description": "10 GiB",
                    "type": "integer",
                    "minimum": 0,
                    "example": 10737418240
                },
                "traffic_type": {
                    "type": "string",
                    "enum": [
                        "Free",
                        "MonthlyTransmit",
                        "MonthlyReceive",
                        "TotallyTransmit",
                        "TotallyReceive"
                    ],
                    "example": "MonthlyTransmit"
                },
                "username": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 2
                }
            }
        },
        "ocserv_user.OcservUsersResponse": {
            "type": "object",
            "required": [
                "meta"
            ],
            "properties": {
                "meta": {
                    "$ref": "#/definitions/request.Meta"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.OcservUser"
                    }
                }
            }
        },
        "ocserv_user.UpdateOcservUserData": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/models.OcservUserConfig"
                },
                "description": {
                    "type": "string",
                    "maxLength": 1024,
                    "example": "User for testing VPN access"
                },
                "expire_at": {
                    "type": "string",
                    "example": "2025-12-31"
                },
                "group": {
                    "type": "string",
                    "example": "default"
                },
                "password": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 2,
                    "example": "strongpassword123"
                },
                "traffic_size": {
                    "description": "10 GiB",
                    "type": "integer",
                    "example": 10737418240
                },
                "traffic_type": {
                    "type": "string",
                    "enum": [
                        "Free",
                        "MonthlyTransmit",
                        "MonthlyReceive",
                        "TotallyTransmit",
                        "TotallyReceive"
                    ],
                    "example": "MonthlyTransmit"
                }
            }
        },
        "request.ErrorResponse": {
            "type": "object",
            "required": [
                "error",
                "message"
            ],
            "properties": {
                "error": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "message": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "request.Meta": {
            "type": "object",
            "required": [
                "page",
                "size",
                "total_records"
            ],
            "properties": {
                "page": {
                    "type": "integer"
                },
                "size": {
                    "type": "integer"
                },
                "total_records": {
                    "type": "integer"
                }
            }
        },
        "system.ChangeUserPassword": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        },
        "system.ChangeUserPasswordBySelf": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string"
                },
                "old_password": {
                    "type": "string"
                }
            }
        },
        "system.CreateUserData": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "admin": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "system.GetSystemInitResponse": {
            "type": "object",
            "properties": {
                "google_captcha_site_key": {
                    "type": "string"
                }
            }
        },
        "system.GetSystemResponse": {
            "type": "object",
            "properties": {
                "google_captcha_secret_key": {
                    "type": "string"
                },
                "google_captcha_site_key": {
                    "type": "string"
                }
            }
        },
        "system.LoginData": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 2,
                    "example": "doe123456"
                },
                "remember_me": {
                    "type": "boolean"
                },
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 2,
                    "example": "john_doe"
                }
            }
        },
        "system.PatchSystemUpdateData": {
            "type": "object",
            "required": [
                "google_captcha_secret_key",
                "google_captcha_site_key"
            ],
            "properties": {
                "google_captcha_secret_key": {
                    "type": "string"
                },
                "google_captcha_site_key": {
                    "type": "string"
                }
            }
        },
        "system.SetupSystem": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "google_captcha_secret_key": {
                    "type": "string"
                },
                "google_captcha_site_key": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 4
                },
                "username": {
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 2
                }
            }
        },
        "system.SetupSystemResponse": {
            "type": "object",
            "required": [
                "system",
                "token",
                "user"
            ],
            "properties": {
                "system": {
                    "$ref": "#/definitions/models.System"
                },
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "system.UserLoginResponse": {
            "type": "object",
            "required": [
                "token",
                "user"
            ],
            "properties": {
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "system.UsersResponse": {
            "type": "object",
            "required": [
                "meta"
            ],
            "properties": {
                "meta": {
                    "$ref": "#/definitions/request.Meta"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Ocserv User management Example Api",
	Description:      "This is a sample Ocserv User management Api server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
