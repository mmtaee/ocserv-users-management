/* tslint:disable */
/* eslint-disable */
/**
 * Ocserv User management Example Api
 * This is a sample Ocserv User management Api server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { MiddlewaresUnauthorized } from '../models';
// @ts-ignore
import type { ModelsServerVersion } from '../models';
// @ts-ignore
import type { RequestErrorResponse } from '../models';
/**
 * OCCTLApi - axios parameter creator
 * @export
 */
export const OCCTLApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Occtl Commands
         * @summary Occtl Commands
         * @param {string} authorization Bearer TOKEN
         * @param {number} action Command Action ID (1 to 15)
         * @param {string} [value] Optional parameter depending on command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        occtlCommandsGet: async (authorization: string, action: number, value?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('occtlCommandsGet', 'authorization', authorization)
            // verify required parameter 'action' is not null or undefined
            assertParamExists('occtlCommandsGet', 'action', action)
            const localVarPath = `/occtl/commands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Server information
         * @summary Server information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        occtlServerInfoGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/occtl/server_info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OCCTLApi - functional programming interface
 * @export
 */
export const OCCTLApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OCCTLApiAxiosParamCreator(configuration)
    return {
        /**
         * Occtl Commands
         * @summary Occtl Commands
         * @param {string} authorization Bearer TOKEN
         * @param {number} action Command Action ID (1 to 15)
         * @param {string} [value] Optional parameter depending on command
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async occtlCommandsGet(authorization: string, action: number, value?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.occtlCommandsGet(authorization, action, value, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OCCTLApi.occtlCommandsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Server information
         * @summary Server information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async occtlServerInfoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsServerVersion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.occtlServerInfoGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OCCTLApi.occtlServerInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OCCTLApi - factory interface
 * @export
 */
export const OCCTLApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OCCTLApiFp(configuration)
    return {
        /**
         * Occtl Commands
         * @summary Occtl Commands
         * @param {OCCTLApiOcctlCommandsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        occtlCommandsGet(requestParameters: OCCTLApiOcctlCommandsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.occtlCommandsGet(requestParameters.authorization, requestParameters.action, requestParameters.value, options).then((request) => request(axios, basePath));
        },
        /**
         * Server information
         * @summary Server information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        occtlServerInfoGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsServerVersion> {
            return localVarFp.occtlServerInfoGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for occtlCommandsGet operation in OCCTLApi.
 * @export
 * @interface OCCTLApiOcctlCommandsGetRequest
 */
export interface OCCTLApiOcctlCommandsGetRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OCCTLApiOcctlCommandsGet
     */
    readonly authorization: string

    /**
     * Command Action ID (1 to 15)
     * @type {number}
     * @memberof OCCTLApiOcctlCommandsGet
     */
    readonly action: number

    /**
     * Optional parameter depending on command
     * @type {string}
     * @memberof OCCTLApiOcctlCommandsGet
     */
    readonly value?: string
}

/**
 * OCCTLApi - object-oriented interface
 * @export
 * @class OCCTLApi
 * @extends {BaseAPI}
 */
export class OCCTLApi extends BaseAPI {
    /**
     * Occtl Commands
     * @summary Occtl Commands
     * @param {OCCTLApiOcctlCommandsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OCCTLApi
     */
    public occtlCommandsGet(requestParameters: OCCTLApiOcctlCommandsGetRequest, options?: RawAxiosRequestConfig) {
        return OCCTLApiFp(this.configuration).occtlCommandsGet(requestParameters.authorization, requestParameters.action, requestParameters.value, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Server information
     * @summary Server information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OCCTLApi
     */
    public occtlServerInfoGet(options?: RawAxiosRequestConfig) {
        return OCCTLApiFp(this.configuration).occtlServerInfoGet(options).then((request) => request(this.axios, this.basePath));
    }
}

