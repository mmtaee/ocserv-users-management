/* tslint:disable */
/* eslint-disable */
/**
 * Ocserv User management Example Api
 * This is a sample Ocserv User management Api server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { MiddlewaresUnauthorized } from '../models';
// @ts-ignore
import type { ModelsOcservGroup } from '../models';
// @ts-ignore
import type { OcservGroupCreateOcservGroupData } from '../models';
// @ts-ignore
import type { OcservGroupOcservGroupsResponse } from '../models';
// @ts-ignore
import type { OcservGroupUpdateOcservGroupData } from '../models';
// @ts-ignore
import type { RequestErrorResponse } from '../models';
/**
 * OcservGroupsApi - axios parameter creator
 * @export
 */
export const OcservGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List of Ocserv groups
         * @summary List of Ocserv groups
         * @param {string} authorization Bearer TOKEN
         * @param {number} [page] Page number, starting from 1
         * @param {number} [pageSize] Number of items per page
         * @param {string} [order] Field to order by
         * @param {OcservGroupsGetSortEnum} [sort] Sort order, either ASC or DESC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservGroupsGet: async (authorization: string, page?: number, pageSize?: number, order?: string, sort?: OcservGroupsGetSortEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocservGroupsGet', 'authorization', authorization)
            const localVarPath = `/ocserv/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of Ocserv group names
         * @summary List of Ocserv group names
         * @param {string} authorization Bearer TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservGroupsLookupGet: async (authorization: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocservGroupsLookupGet', 'authorization', authorization)
            const localVarPath = `/ocserv/groups/lookup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ocserv Group creation
         * @summary Ocserv Group creation
         * @param {string} authorization Bearer TOKEN
         * @param {OcservGroupCreateOcservGroupData} request ocserv group create data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservGroupsPost: async (authorization: string, request: OcservGroupCreateOcservGroupData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocservGroupsPost', 'authorization', authorization)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('ocservGroupsPost', 'request', request)
            const localVarPath = `/ocserv/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ocserv Group delete
         * @summary Ocserv Group delete
         * @param {string} authorization Bearer TOKEN
         * @param {number} uid Ocserv Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservGroupsUidDelete: async (authorization: string, uid: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocservGroupsUidDelete', 'authorization', authorization)
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('ocservGroupsUidDelete', 'uid', uid)
            const localVarPath = `/ocserv/groups/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ocserv Group update
         * @summary Ocserv Group update
         * @param {string} authorization Bearer TOKEN
         * @param {number} uid Ocserv Group ID
         * @param {OcservGroupUpdateOcservGroupData} request ocserv group create data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservGroupsUidPatch: async (authorization: string, uid: number, request: OcservGroupUpdateOcservGroupData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocservGroupsUidPatch', 'authorization', authorization)
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('ocservGroupsUidPatch', 'uid', uid)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('ocservGroupsUidPatch', 'request', request)
            const localVarPath = `/ocserv/groups/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OcservGroupsApi - functional programming interface
 * @export
 */
export const OcservGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OcservGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * List of Ocserv groups
         * @summary List of Ocserv groups
         * @param {string} authorization Bearer TOKEN
         * @param {number} [page] Page number, starting from 1
         * @param {number} [pageSize] Number of items per page
         * @param {string} [order] Field to order by
         * @param {OcservGroupsGetSortEnum} [sort] Sort order, either ASC or DESC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocservGroupsGet(authorization: string, page?: number, pageSize?: number, order?: string, sort?: OcservGroupsGetSortEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OcservGroupOcservGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocservGroupsGet(authorization, page, pageSize, order, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservGroupsApi.ocservGroupsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of Ocserv group names
         * @summary List of Ocserv group names
         * @param {string} authorization Bearer TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocservGroupsLookupGet(authorization: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocservGroupsLookupGet(authorization, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservGroupsApi.ocservGroupsLookupGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Ocserv Group creation
         * @summary Ocserv Group creation
         * @param {string} authorization Bearer TOKEN
         * @param {OcservGroupCreateOcservGroupData} request ocserv group create data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocservGroupsPost(authorization: string, request: OcservGroupCreateOcservGroupData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsOcservGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocservGroupsPost(authorization, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservGroupsApi.ocservGroupsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Ocserv Group delete
         * @summary Ocserv Group delete
         * @param {string} authorization Bearer TOKEN
         * @param {number} uid Ocserv Group ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocservGroupsUidDelete(authorization: string, uid: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocservGroupsUidDelete(authorization, uid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservGroupsApi.ocservGroupsUidDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Ocserv Group update
         * @summary Ocserv Group update
         * @param {string} authorization Bearer TOKEN
         * @param {number} uid Ocserv Group ID
         * @param {OcservGroupUpdateOcservGroupData} request ocserv group create data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocservGroupsUidPatch(authorization: string, uid: number, request: OcservGroupUpdateOcservGroupData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsOcservGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocservGroupsUidPatch(authorization, uid, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservGroupsApi.ocservGroupsUidPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OcservGroupsApi - factory interface
 * @export
 */
export const OcservGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OcservGroupsApiFp(configuration)
    return {
        /**
         * List of Ocserv groups
         * @summary List of Ocserv groups
         * @param {OcservGroupsApiOcservGroupsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservGroupsGet(requestParameters: OcservGroupsApiOcservGroupsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<OcservGroupOcservGroupsResponse> {
            return localVarFp.ocservGroupsGet(requestParameters.authorization, requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * List of Ocserv group names
         * @summary List of Ocserv group names
         * @param {OcservGroupsApiOcservGroupsLookupGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservGroupsLookupGet(requestParameters: OcservGroupsApiOcservGroupsLookupGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.ocservGroupsLookupGet(requestParameters.authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Ocserv Group creation
         * @summary Ocserv Group creation
         * @param {OcservGroupsApiOcservGroupsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservGroupsPost(requestParameters: OcservGroupsApiOcservGroupsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsOcservGroup> {
            return localVarFp.ocservGroupsPost(requestParameters.authorization, requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * Ocserv Group delete
         * @summary Ocserv Group delete
         * @param {OcservGroupsApiOcservGroupsUidDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservGroupsUidDelete(requestParameters: OcservGroupsApiOcservGroupsUidDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ocservGroupsUidDelete(requestParameters.authorization, requestParameters.uid, options).then((request) => request(axios, basePath));
        },
        /**
         * Ocserv Group update
         * @summary Ocserv Group update
         * @param {OcservGroupsApiOcservGroupsUidPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservGroupsUidPatch(requestParameters: OcservGroupsApiOcservGroupsUidPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsOcservGroup> {
            return localVarFp.ocservGroupsUidPatch(requestParameters.authorization, requestParameters.uid, requestParameters.request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for ocservGroupsGet operation in OcservGroupsApi.
 * @export
 * @interface OcservGroupsApiOcservGroupsGetRequest
 */
export interface OcservGroupsApiOcservGroupsGetRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservGroupsApiOcservGroupsGet
     */
    readonly authorization: string

    /**
     * Page number, starting from 1
     * @type {number}
     * @memberof OcservGroupsApiOcservGroupsGet
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof OcservGroupsApiOcservGroupsGet
     */
    readonly pageSize?: number

    /**
     * Field to order by
     * @type {string}
     * @memberof OcservGroupsApiOcservGroupsGet
     */
    readonly order?: string

    /**
     * Sort order, either ASC or DESC
     * @type {'ASC' | 'DESC'}
     * @memberof OcservGroupsApiOcservGroupsGet
     */
    readonly sort?: OcservGroupsGetSortEnum
}

/**
 * Request parameters for ocservGroupsLookupGet operation in OcservGroupsApi.
 * @export
 * @interface OcservGroupsApiOcservGroupsLookupGetRequest
 */
export interface OcservGroupsApiOcservGroupsLookupGetRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservGroupsApiOcservGroupsLookupGet
     */
    readonly authorization: string
}

/**
 * Request parameters for ocservGroupsPost operation in OcservGroupsApi.
 * @export
 * @interface OcservGroupsApiOcservGroupsPostRequest
 */
export interface OcservGroupsApiOcservGroupsPostRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservGroupsApiOcservGroupsPost
     */
    readonly authorization: string

    /**
     * ocserv group create data
     * @type {OcservGroupCreateOcservGroupData}
     * @memberof OcservGroupsApiOcservGroupsPost
     */
    readonly request: OcservGroupCreateOcservGroupData
}

/**
 * Request parameters for ocservGroupsUidDelete operation in OcservGroupsApi.
 * @export
 * @interface OcservGroupsApiOcservGroupsUidDeleteRequest
 */
export interface OcservGroupsApiOcservGroupsUidDeleteRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservGroupsApiOcservGroupsUidDelete
     */
    readonly authorization: string

    /**
     * Ocserv Group ID
     * @type {number}
     * @memberof OcservGroupsApiOcservGroupsUidDelete
     */
    readonly uid: number
}

/**
 * Request parameters for ocservGroupsUidPatch operation in OcservGroupsApi.
 * @export
 * @interface OcservGroupsApiOcservGroupsUidPatchRequest
 */
export interface OcservGroupsApiOcservGroupsUidPatchRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservGroupsApiOcservGroupsUidPatch
     */
    readonly authorization: string

    /**
     * Ocserv Group ID
     * @type {number}
     * @memberof OcservGroupsApiOcservGroupsUidPatch
     */
    readonly uid: number

    /**
     * ocserv group create data
     * @type {OcservGroupUpdateOcservGroupData}
     * @memberof OcservGroupsApiOcservGroupsUidPatch
     */
    readonly request: OcservGroupUpdateOcservGroupData
}

/**
 * OcservGroupsApi - object-oriented interface
 * @export
 * @class OcservGroupsApi
 * @extends {BaseAPI}
 */
export class OcservGroupsApi extends BaseAPI {
    /**
     * List of Ocserv groups
     * @summary List of Ocserv groups
     * @param {OcservGroupsApiOcservGroupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservGroupsApi
     */
    public ocservGroupsGet(requestParameters: OcservGroupsApiOcservGroupsGetRequest, options?: RawAxiosRequestConfig) {
        return OcservGroupsApiFp(this.configuration).ocservGroupsGet(requestParameters.authorization, requestParameters.page, requestParameters.pageSize, requestParameters.order, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of Ocserv group names
     * @summary List of Ocserv group names
     * @param {OcservGroupsApiOcservGroupsLookupGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservGroupsApi
     */
    public ocservGroupsLookupGet(requestParameters: OcservGroupsApiOcservGroupsLookupGetRequest, options?: RawAxiosRequestConfig) {
        return OcservGroupsApiFp(this.configuration).ocservGroupsLookupGet(requestParameters.authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Ocserv Group creation
     * @summary Ocserv Group creation
     * @param {OcservGroupsApiOcservGroupsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservGroupsApi
     */
    public ocservGroupsPost(requestParameters: OcservGroupsApiOcservGroupsPostRequest, options?: RawAxiosRequestConfig) {
        return OcservGroupsApiFp(this.configuration).ocservGroupsPost(requestParameters.authorization, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Ocserv Group delete
     * @summary Ocserv Group delete
     * @param {OcservGroupsApiOcservGroupsUidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservGroupsApi
     */
    public ocservGroupsUidDelete(requestParameters: OcservGroupsApiOcservGroupsUidDeleteRequest, options?: RawAxiosRequestConfig) {
        return OcservGroupsApiFp(this.configuration).ocservGroupsUidDelete(requestParameters.authorization, requestParameters.uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Ocserv Group update
     * @summary Ocserv Group update
     * @param {OcservGroupsApiOcservGroupsUidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservGroupsApi
     */
    public ocservGroupsUidPatch(requestParameters: OcservGroupsApiOcservGroupsUidPatchRequest, options?: RawAxiosRequestConfig) {
        return OcservGroupsApiFp(this.configuration).ocservGroupsUidPatch(requestParameters.authorization, requestParameters.uid, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const OcservGroupsGetSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
} as const;
export type OcservGroupsGetSortEnum = typeof OcservGroupsGetSortEnum[keyof typeof OcservGroupsGetSortEnum];
