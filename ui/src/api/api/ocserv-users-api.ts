/* tslint:disable */
/* eslint-disable */
/**
 * Ocserv User management Example Api
 * This is a sample Ocserv User management Api server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { MiddlewaresUnauthorized } from '../models';
// @ts-ignore
import type { ModelsDailyTraffic } from '../models';
// @ts-ignore
import type { ModelsOcservUser } from '../models';
// @ts-ignore
import type { OcservUserCreateOcservUserData } from '../models';
// @ts-ignore
import type { OcservUserOcservUsersResponse } from '../models';
// @ts-ignore
import type { OcservUserUpdateOcservUserData } from '../models';
// @ts-ignore
import type { RequestErrorResponse } from '../models';
/**
 * OcservUsersApi - axios parameter creator
 * @export
 */
export const OcservUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List of Ocserv Users
         * @summary List of Ocserv Users
         * @param {string} authorization Bearer TOKEN
         * @param {number} [page] Page number, starting from 1
         * @param {number} [size] Number of items per page
         * @param {string} [order] Field to order by
         * @param {OcservUsersGetSortEnum} [sort] Sort order, either ASC or DESC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservUsersGet: async (authorization: string, page?: number, size?: number, order?: string, sort?: OcservUsersGetSortEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocservUsersGet', 'authorization', authorization)
            const localVarPath = `/ocserv/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ocserv User creation
         * @summary Ocserv User creation
         * @param {string} authorization Bearer TOKEN
         * @param {OcservUserCreateOcservUserData} request ocserv user create data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservUsersPost: async (authorization: string, request: OcservUserCreateOcservUserData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocservUsersPost', 'authorization', authorization)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('ocservUsersPost', 'request', request)
            const localVarPath = `/ocserv/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ocserv User delete
         * @summary Ocserv User delete
         * @param {string} authorization Bearer TOKEN
         * @param {string} uid Ocserv User UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservUsersUidDelete: async (authorization: string, uid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocservUsersUidDelete', 'authorization', authorization)
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('ocservUsersUidDelete', 'uid', uid)
            const localVarPath = `/ocserv/users/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ocserv User locking
         * @summary Ocserv User locking
         * @param {string} authorization Bearer TOKEN
         * @param {string} uid Ocserv User UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservUsersUidLockPost: async (authorization: string, uid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocservUsersUidLockPost', 'authorization', authorization)
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('ocservUsersUidLockPost', 'uid', uid)
            const localVarPath = `/ocserv/users/{uid}/lock`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ocserv User update
         * @summary Ocserv User update
         * @param {string} authorization Bearer TOKEN
         * @param {string} uid Ocserv User UID
         * @param {OcservUserUpdateOcservUserData} request ocserv user update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservUsersUidPatch: async (authorization: string, uid: string, request: OcservUserUpdateOcservUserData, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocservUsersUidPatch', 'authorization', authorization)
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('ocservUsersUidPatch', 'uid', uid)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('ocservUsersUidPatch', 'request', request)
            const localVarPath = `/ocserv/users/{uid}`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ocserv User Statistics
         * @summary Ocserv User Statistics
         * @param {string} authorization Bearer TOKEN
         * @param {string} uid Ocserv User UID
         * @param {string} [dateStart] date_start
         * @param {string} [dateEnd] date_end
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservUsersUidStatisticsGet: async (authorization: string, uid: string, dateStart?: string, dateEnd?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocservUsersUidStatisticsGet', 'authorization', authorization)
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('ocservUsersUidStatisticsGet', 'uid', uid)
            const localVarPath = `/ocserv/users/{uid}/statistics`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateStart !== undefined) {
                localVarQueryParameter['date_start'] = dateStart;
            }

            if (dateEnd !== undefined) {
                localVarQueryParameter['date_end'] = dateEnd;
            }


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ocserv User unlocking
         * @summary Ocserv User unlocking
         * @param {string} authorization Bearer TOKEN
         * @param {string} uid Ocserv User UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservUsersUidUnlockPost: async (authorization: string, uid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocservUsersUidUnlockPost', 'authorization', authorization)
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('ocservUsersUidUnlockPost', 'uid', uid)
            const localVarPath = `/ocserv/users/{uid}/unlock`
                .replace(`{${"uid"}}`, encodeURIComponent(String(uid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Disconnect Ocserv User
         * @summary Disconnect Ocserv User
         * @param {string} authorization Bearer TOKEN
         * @param {string} username Ocserv User username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservUsersUsernameDisconnectPost: async (authorization: string, username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('ocservUsersUsernameDisconnectPost', 'authorization', authorization)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('ocservUsersUsernameDisconnectPost', 'username', username)
            const localVarPath = `/ocserv/users/{username}/disconnect`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (authorization != null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OcservUsersApi - functional programming interface
 * @export
 */
export const OcservUsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OcservUsersApiAxiosParamCreator(configuration)
    return {
        /**
         * List of Ocserv Users
         * @summary List of Ocserv Users
         * @param {string} authorization Bearer TOKEN
         * @param {number} [page] Page number, starting from 1
         * @param {number} [size] Number of items per page
         * @param {string} [order] Field to order by
         * @param {OcservUsersGetSortEnum} [sort] Sort order, either ASC or DESC
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocservUsersGet(authorization: string, page?: number, size?: number, order?: string, sort?: OcservUsersGetSortEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OcservUserOcservUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocservUsersGet(authorization, page, size, order, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservUsersApi.ocservUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Ocserv User creation
         * @summary Ocserv User creation
         * @param {string} authorization Bearer TOKEN
         * @param {OcservUserCreateOcservUserData} request ocserv user create data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocservUsersPost(authorization: string, request: OcservUserCreateOcservUserData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsOcservUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocservUsersPost(authorization, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservUsersApi.ocservUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Ocserv User delete
         * @summary Ocserv User delete
         * @param {string} authorization Bearer TOKEN
         * @param {string} uid Ocserv User UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocservUsersUidDelete(authorization: string, uid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocservUsersUidDelete(authorization, uid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservUsersApi.ocservUsersUidDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Ocserv User locking
         * @summary Ocserv User locking
         * @param {string} authorization Bearer TOKEN
         * @param {string} uid Ocserv User UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocservUsersUidLockPost(authorization: string, uid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocservUsersUidLockPost(authorization, uid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservUsersApi.ocservUsersUidLockPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Ocserv User update
         * @summary Ocserv User update
         * @param {string} authorization Bearer TOKEN
         * @param {string} uid Ocserv User UID
         * @param {OcservUserUpdateOcservUserData} request ocserv user update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocservUsersUidPatch(authorization: string, uid: string, request: OcservUserUpdateOcservUserData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsOcservUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocservUsersUidPatch(authorization, uid, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservUsersApi.ocservUsersUidPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Ocserv User Statistics
         * @summary Ocserv User Statistics
         * @param {string} authorization Bearer TOKEN
         * @param {string} uid Ocserv User UID
         * @param {string} [dateStart] date_start
         * @param {string} [dateEnd] date_end
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocservUsersUidStatisticsGet(authorization: string, uid: string, dateStart?: string, dateEnd?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsDailyTraffic>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocservUsersUidStatisticsGet(authorization, uid, dateStart, dateEnd, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservUsersApi.ocservUsersUidStatisticsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Ocserv User unlocking
         * @summary Ocserv User unlocking
         * @param {string} authorization Bearer TOKEN
         * @param {string} uid Ocserv User UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocservUsersUidUnlockPost(authorization: string, uid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocservUsersUidUnlockPost(authorization, uid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservUsersApi.ocservUsersUidUnlockPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Disconnect Ocserv User
         * @summary Disconnect Ocserv User
         * @param {string} authorization Bearer TOKEN
         * @param {string} username Ocserv User username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ocservUsersUsernameDisconnectPost(authorization: string, username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ocservUsersUsernameDisconnectPost(authorization, username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OcservUsersApi.ocservUsersUsernameDisconnectPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OcservUsersApi - factory interface
 * @export
 */
export const OcservUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OcservUsersApiFp(configuration)
    return {
        /**
         * List of Ocserv Users
         * @summary List of Ocserv Users
         * @param {OcservUsersApiOcservUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservUsersGet(requestParameters: OcservUsersApiOcservUsersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<OcservUserOcservUsersResponse> {
            return localVarFp.ocservUsersGet(requestParameters.authorization, requestParameters.page, requestParameters.size, requestParameters.order, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Ocserv User creation
         * @summary Ocserv User creation
         * @param {OcservUsersApiOcservUsersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservUsersPost(requestParameters: OcservUsersApiOcservUsersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsOcservUser> {
            return localVarFp.ocservUsersPost(requestParameters.authorization, requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * Ocserv User delete
         * @summary Ocserv User delete
         * @param {OcservUsersApiOcservUsersUidDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservUsersUidDelete(requestParameters: OcservUsersApiOcservUsersUidDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ocservUsersUidDelete(requestParameters.authorization, requestParameters.uid, options).then((request) => request(axios, basePath));
        },
        /**
         * Ocserv User locking
         * @summary Ocserv User locking
         * @param {OcservUsersApiOcservUsersUidLockPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservUsersUidLockPost(requestParameters: OcservUsersApiOcservUsersUidLockPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ocservUsersUidLockPost(requestParameters.authorization, requestParameters.uid, options).then((request) => request(axios, basePath));
        },
        /**
         * Ocserv User update
         * @summary Ocserv User update
         * @param {OcservUsersApiOcservUsersUidPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservUsersUidPatch(requestParameters: OcservUsersApiOcservUsersUidPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsOcservUser> {
            return localVarFp.ocservUsersUidPatch(requestParameters.authorization, requestParameters.uid, requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * Ocserv User Statistics
         * @summary Ocserv User Statistics
         * @param {OcservUsersApiOcservUsersUidStatisticsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservUsersUidStatisticsGet(requestParameters: OcservUsersApiOcservUsersUidStatisticsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ModelsDailyTraffic>> {
            return localVarFp.ocservUsersUidStatisticsGet(requestParameters.authorization, requestParameters.uid, requestParameters.dateStart, requestParameters.dateEnd, options).then((request) => request(axios, basePath));
        },
        /**
         * Ocserv User unlocking
         * @summary Ocserv User unlocking
         * @param {OcservUsersApiOcservUsersUidUnlockPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservUsersUidUnlockPost(requestParameters: OcservUsersApiOcservUsersUidUnlockPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ocservUsersUidUnlockPost(requestParameters.authorization, requestParameters.uid, options).then((request) => request(axios, basePath));
        },
        /**
         * Disconnect Ocserv User
         * @summary Disconnect Ocserv User
         * @param {OcservUsersApiOcservUsersUsernameDisconnectPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ocservUsersUsernameDisconnectPost(requestParameters: OcservUsersApiOcservUsersUsernameDisconnectPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ocservUsersUsernameDisconnectPost(requestParameters.authorization, requestParameters.username, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for ocservUsersGet operation in OcservUsersApi.
 * @export
 * @interface OcservUsersApiOcservUsersGetRequest
 */
export interface OcservUsersApiOcservUsersGetRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservUsersApiOcservUsersGet
     */
    readonly authorization: string

    /**
     * Page number, starting from 1
     * @type {number}
     * @memberof OcservUsersApiOcservUsersGet
     */
    readonly page?: number

    /**
     * Number of items per page
     * @type {number}
     * @memberof OcservUsersApiOcservUsersGet
     */
    readonly size?: number

    /**
     * Field to order by
     * @type {string}
     * @memberof OcservUsersApiOcservUsersGet
     */
    readonly order?: string

    /**
     * Sort order, either ASC or DESC
     * @type {'ASC' | 'DESC'}
     * @memberof OcservUsersApiOcservUsersGet
     */
    readonly sort?: OcservUsersGetSortEnum
}

/**
 * Request parameters for ocservUsersPost operation in OcservUsersApi.
 * @export
 * @interface OcservUsersApiOcservUsersPostRequest
 */
export interface OcservUsersApiOcservUsersPostRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservUsersApiOcservUsersPost
     */
    readonly authorization: string

    /**
     * ocserv user create data
     * @type {OcservUserCreateOcservUserData}
     * @memberof OcservUsersApiOcservUsersPost
     */
    readonly request: OcservUserCreateOcservUserData
}

/**
 * Request parameters for ocservUsersUidDelete operation in OcservUsersApi.
 * @export
 * @interface OcservUsersApiOcservUsersUidDeleteRequest
 */
export interface OcservUsersApiOcservUsersUidDeleteRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservUsersApiOcservUsersUidDelete
     */
    readonly authorization: string

    /**
     * Ocserv User UID
     * @type {string}
     * @memberof OcservUsersApiOcservUsersUidDelete
     */
    readonly uid: string
}

/**
 * Request parameters for ocservUsersUidLockPost operation in OcservUsersApi.
 * @export
 * @interface OcservUsersApiOcservUsersUidLockPostRequest
 */
export interface OcservUsersApiOcservUsersUidLockPostRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservUsersApiOcservUsersUidLockPost
     */
    readonly authorization: string

    /**
     * Ocserv User UID
     * @type {string}
     * @memberof OcservUsersApiOcservUsersUidLockPost
     */
    readonly uid: string
}

/**
 * Request parameters for ocservUsersUidPatch operation in OcservUsersApi.
 * @export
 * @interface OcservUsersApiOcservUsersUidPatchRequest
 */
export interface OcservUsersApiOcservUsersUidPatchRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservUsersApiOcservUsersUidPatch
     */
    readonly authorization: string

    /**
     * Ocserv User UID
     * @type {string}
     * @memberof OcservUsersApiOcservUsersUidPatch
     */
    readonly uid: string

    /**
     * ocserv user update data
     * @type {OcservUserUpdateOcservUserData}
     * @memberof OcservUsersApiOcservUsersUidPatch
     */
    readonly request: OcservUserUpdateOcservUserData
}

/**
 * Request parameters for ocservUsersUidStatisticsGet operation in OcservUsersApi.
 * @export
 * @interface OcservUsersApiOcservUsersUidStatisticsGetRequest
 */
export interface OcservUsersApiOcservUsersUidStatisticsGetRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservUsersApiOcservUsersUidStatisticsGet
     */
    readonly authorization: string

    /**
     * Ocserv User UID
     * @type {string}
     * @memberof OcservUsersApiOcservUsersUidStatisticsGet
     */
    readonly uid: string

    /**
     * date_start
     * @type {string}
     * @memberof OcservUsersApiOcservUsersUidStatisticsGet
     */
    readonly dateStart?: string

    /**
     * date_end
     * @type {string}
     * @memberof OcservUsersApiOcservUsersUidStatisticsGet
     */
    readonly dateEnd?: string
}

/**
 * Request parameters for ocservUsersUidUnlockPost operation in OcservUsersApi.
 * @export
 * @interface OcservUsersApiOcservUsersUidUnlockPostRequest
 */
export interface OcservUsersApiOcservUsersUidUnlockPostRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservUsersApiOcservUsersUidUnlockPost
     */
    readonly authorization: string

    /**
     * Ocserv User UID
     * @type {string}
     * @memberof OcservUsersApiOcservUsersUidUnlockPost
     */
    readonly uid: string
}

/**
 * Request parameters for ocservUsersUsernameDisconnectPost operation in OcservUsersApi.
 * @export
 * @interface OcservUsersApiOcservUsersUsernameDisconnectPostRequest
 */
export interface OcservUsersApiOcservUsersUsernameDisconnectPostRequest {
    /**
     * Bearer TOKEN
     * @type {string}
     * @memberof OcservUsersApiOcservUsersUsernameDisconnectPost
     */
    readonly authorization: string

    /**
     * Ocserv User username
     * @type {string}
     * @memberof OcservUsersApiOcservUsersUsernameDisconnectPost
     */
    readonly username: string
}

/**
 * OcservUsersApi - object-oriented interface
 * @export
 * @class OcservUsersApi
 * @extends {BaseAPI}
 */
export class OcservUsersApi extends BaseAPI {
    /**
     * List of Ocserv Users
     * @summary List of Ocserv Users
     * @param {OcservUsersApiOcservUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservUsersApi
     */
    public ocservUsersGet(requestParameters: OcservUsersApiOcservUsersGetRequest, options?: RawAxiosRequestConfig) {
        return OcservUsersApiFp(this.configuration).ocservUsersGet(requestParameters.authorization, requestParameters.page, requestParameters.size, requestParameters.order, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Ocserv User creation
     * @summary Ocserv User creation
     * @param {OcservUsersApiOcservUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservUsersApi
     */
    public ocservUsersPost(requestParameters: OcservUsersApiOcservUsersPostRequest, options?: RawAxiosRequestConfig) {
        return OcservUsersApiFp(this.configuration).ocservUsersPost(requestParameters.authorization, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Ocserv User delete
     * @summary Ocserv User delete
     * @param {OcservUsersApiOcservUsersUidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservUsersApi
     */
    public ocservUsersUidDelete(requestParameters: OcservUsersApiOcservUsersUidDeleteRequest, options?: RawAxiosRequestConfig) {
        return OcservUsersApiFp(this.configuration).ocservUsersUidDelete(requestParameters.authorization, requestParameters.uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Ocserv User locking
     * @summary Ocserv User locking
     * @param {OcservUsersApiOcservUsersUidLockPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservUsersApi
     */
    public ocservUsersUidLockPost(requestParameters: OcservUsersApiOcservUsersUidLockPostRequest, options?: RawAxiosRequestConfig) {
        return OcservUsersApiFp(this.configuration).ocservUsersUidLockPost(requestParameters.authorization, requestParameters.uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Ocserv User update
     * @summary Ocserv User update
     * @param {OcservUsersApiOcservUsersUidPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservUsersApi
     */
    public ocservUsersUidPatch(requestParameters: OcservUsersApiOcservUsersUidPatchRequest, options?: RawAxiosRequestConfig) {
        return OcservUsersApiFp(this.configuration).ocservUsersUidPatch(requestParameters.authorization, requestParameters.uid, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Ocserv User Statistics
     * @summary Ocserv User Statistics
     * @param {OcservUsersApiOcservUsersUidStatisticsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservUsersApi
     */
    public ocservUsersUidStatisticsGet(requestParameters: OcservUsersApiOcservUsersUidStatisticsGetRequest, options?: RawAxiosRequestConfig) {
        return OcservUsersApiFp(this.configuration).ocservUsersUidStatisticsGet(requestParameters.authorization, requestParameters.uid, requestParameters.dateStart, requestParameters.dateEnd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Ocserv User unlocking
     * @summary Ocserv User unlocking
     * @param {OcservUsersApiOcservUsersUidUnlockPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservUsersApi
     */
    public ocservUsersUidUnlockPost(requestParameters: OcservUsersApiOcservUsersUidUnlockPostRequest, options?: RawAxiosRequestConfig) {
        return OcservUsersApiFp(this.configuration).ocservUsersUidUnlockPost(requestParameters.authorization, requestParameters.uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Disconnect Ocserv User
     * @summary Disconnect Ocserv User
     * @param {OcservUsersApiOcservUsersUsernameDisconnectPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OcservUsersApi
     */
    public ocservUsersUsernameDisconnectPost(requestParameters: OcservUsersApiOcservUsersUsernameDisconnectPostRequest, options?: RawAxiosRequestConfig) {
        return OcservUsersApiFp(this.configuration).ocservUsersUsernameDisconnectPost(requestParameters.authorization, requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const OcservUsersGetSortEnum = {
    ASC: 'ASC',
    DESC: 'DESC'
} as const;
export type OcservUsersGetSortEnum = typeof OcservUsersGetSortEnum[keyof typeof OcservUsersGetSortEnum];
